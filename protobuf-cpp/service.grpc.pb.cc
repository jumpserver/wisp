// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace message {

static const char* Service_method_names[] = {
  "/message.Service/GetTokenAuthInfo",
  "/message.Service/RenewToken",
  "/message.Service/CreateSession",
  "/message.Service/FinishSession",
  "/message.Service/UploadReplayFile",
  "/message.Service/UploadCommand",
  "/message.Service/DispatchTask",
  "/message.Service/ScanRemainReplays",
  "/message.Service/CreateCommandTicket",
  "/message.Service/CheckOrCreateAssetLoginTicket",
  "/message.Service/CheckTicketState",
  "/message.Service/CancelTicket",
  "/message.Service/CreateForward",
  "/message.Service/DeleteForward",
  "/message.Service/GetPublicSetting",
  "/message.Service/GetListenPorts",
  "/message.Service/GetPortInfo",
  "/message.Service/HandlePortFailure",
  "/message.Service/CheckUserByCookies",
  "/message.Service/RecordSessionLifecycleLog",
  "/message.Service/FaceRecognitionCallback",
  "/message.Service/FaceMonitorCallback",
  "/message.Service/JoinFaceMonitor",
};

std::unique_ptr< Service::Stub> Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Service::Stub> stub(new Service::Stub(channel, options));
  return stub;
}

Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetTokenAuthInfo_(Service_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RenewToken_(Service_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSession_(Service_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FinishSession_(Service_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadReplayFile_(Service_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadCommand_(Service_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DispatchTask_(Service_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ScanRemainReplays_(Service_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCommandTicket_(Service_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckOrCreateAssetLoginTicket_(Service_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckTicketState_(Service_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelTicket_(Service_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateForward_(Service_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteForward_(Service_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPublicSetting_(Service_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetListenPorts_(Service_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPortInfo_(Service_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandlePortFailure_(Service_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckUserByCookies_(Service_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecordSessionLifecycleLog_(Service_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FaceRecognitionCallback_(Service_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FaceMonitorCallback_(Service_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JoinFaceMonitor_(Service_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Service::Stub::GetTokenAuthInfo(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::message::TokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::TokenRequest, ::message::TokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTokenAuthInfo_, context, request, response);
}

void Service::Stub::async::GetTokenAuthInfo(::grpc::ClientContext* context, const ::message::TokenRequest* request, ::message::TokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::TokenRequest, ::message::TokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTokenAuthInfo_, context, request, response, std::move(f));
}

void Service::Stub::async::GetTokenAuthInfo(::grpc::ClientContext* context, const ::message::TokenRequest* request, ::message::TokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTokenAuthInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::TokenResponse>* Service::Stub::PrepareAsyncGetTokenAuthInfoRaw(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::TokenResponse, ::message::TokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTokenAuthInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::TokenResponse>* Service::Stub::AsyncGetTokenAuthInfoRaw(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTokenAuthInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::RenewToken(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::message::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::TokenRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RenewToken_, context, request, response);
}

void Service::Stub::async::RenewToken(::grpc::ClientContext* context, const ::message::TokenRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::TokenRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenewToken_, context, request, response, std::move(f));
}

void Service::Stub::async::RenewToken(::grpc::ClientContext* context, const ::message::TokenRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenewToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* Service::Stub::PrepareAsyncRenewTokenRaw(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::StatusResponse, ::message::TokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RenewToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* Service::Stub::AsyncRenewTokenRaw(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenewTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::CreateSession(::grpc::ClientContext* context, const ::message::SessionCreateRequest& request, ::message::SessionCreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::SessionCreateRequest, ::message::SessionCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSession_, context, request, response);
}

void Service::Stub::async::CreateSession(::grpc::ClientContext* context, const ::message::SessionCreateRequest* request, ::message::SessionCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::SessionCreateRequest, ::message::SessionCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSession_, context, request, response, std::move(f));
}

void Service::Stub::async::CreateSession(::grpc::ClientContext* context, const ::message::SessionCreateRequest* request, ::message::SessionCreateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::SessionCreateResponse>* Service::Stub::PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::message::SessionCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::SessionCreateResponse, ::message::SessionCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::SessionCreateResponse>* Service::Stub::AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::message::SessionCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::FinishSession(::grpc::ClientContext* context, const ::message::SessionFinishRequest& request, ::message::SessionFinishResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::SessionFinishRequest, ::message::SessionFinishResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FinishSession_, context, request, response);
}

void Service::Stub::async::FinishSession(::grpc::ClientContext* context, const ::message::SessionFinishRequest* request, ::message::SessionFinishResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::SessionFinishRequest, ::message::SessionFinishResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FinishSession_, context, request, response, std::move(f));
}

void Service::Stub::async::FinishSession(::grpc::ClientContext* context, const ::message::SessionFinishRequest* request, ::message::SessionFinishResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FinishSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::SessionFinishResp>* Service::Stub::PrepareAsyncFinishSessionRaw(::grpc::ClientContext* context, const ::message::SessionFinishRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::SessionFinishResp, ::message::SessionFinishRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FinishSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::SessionFinishResp>* Service::Stub::AsyncFinishSessionRaw(::grpc::ClientContext* context, const ::message::SessionFinishRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFinishSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::UploadReplayFile(::grpc::ClientContext* context, const ::message::ReplayRequest& request, ::message::ReplayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::ReplayRequest, ::message::ReplayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadReplayFile_, context, request, response);
}

void Service::Stub::async::UploadReplayFile(::grpc::ClientContext* context, const ::message::ReplayRequest* request, ::message::ReplayResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::ReplayRequest, ::message::ReplayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadReplayFile_, context, request, response, std::move(f));
}

void Service::Stub::async::UploadReplayFile(::grpc::ClientContext* context, const ::message::ReplayRequest* request, ::message::ReplayResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadReplayFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::ReplayResponse>* Service::Stub::PrepareAsyncUploadReplayFileRaw(::grpc::ClientContext* context, const ::message::ReplayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::ReplayResponse, ::message::ReplayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadReplayFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::ReplayResponse>* Service::Stub::AsyncUploadReplayFileRaw(::grpc::ClientContext* context, const ::message::ReplayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadReplayFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::UploadCommand(::grpc::ClientContext* context, const ::message::CommandRequest& request, ::message::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::CommandRequest, ::message::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadCommand_, context, request, response);
}

void Service::Stub::async::UploadCommand(::grpc::ClientContext* context, const ::message::CommandRequest* request, ::message::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::CommandRequest, ::message::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadCommand_, context, request, response, std::move(f));
}

void Service::Stub::async::UploadCommand(::grpc::ClientContext* context, const ::message::CommandRequest* request, ::message::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::CommandResponse>* Service::Stub::PrepareAsyncUploadCommandRaw(::grpc::ClientContext* context, const ::message::CommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::CommandResponse, ::message::CommandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::CommandResponse>* Service::Stub::AsyncUploadCommandRaw(::grpc::ClientContext* context, const ::message::CommandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::message::FinishedTaskRequest, ::message::TaskResponse>* Service::Stub::DispatchTaskRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::message::FinishedTaskRequest, ::message::TaskResponse>::Create(channel_.get(), rpcmethod_DispatchTask_, context);
}

void Service::Stub::async::DispatchTask(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::message::FinishedTaskRequest,::message::TaskResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::message::FinishedTaskRequest,::message::TaskResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_DispatchTask_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::message::FinishedTaskRequest, ::message::TaskResponse>* Service::Stub::AsyncDispatchTaskRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::message::FinishedTaskRequest, ::message::TaskResponse>::Create(channel_.get(), cq, rpcmethod_DispatchTask_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::message::FinishedTaskRequest, ::message::TaskResponse>* Service::Stub::PrepareAsyncDispatchTaskRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::message::FinishedTaskRequest, ::message::TaskResponse>::Create(channel_.get(), cq, rpcmethod_DispatchTask_, context, false, nullptr);
}

::grpc::Status Service::Stub::ScanRemainReplays(::grpc::ClientContext* context, const ::message::RemainReplayRequest& request, ::message::RemainReplayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::RemainReplayRequest, ::message::RemainReplayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScanRemainReplays_, context, request, response);
}

void Service::Stub::async::ScanRemainReplays(::grpc::ClientContext* context, const ::message::RemainReplayRequest* request, ::message::RemainReplayResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::RemainReplayRequest, ::message::RemainReplayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanRemainReplays_, context, request, response, std::move(f));
}

void Service::Stub::async::ScanRemainReplays(::grpc::ClientContext* context, const ::message::RemainReplayRequest* request, ::message::RemainReplayResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScanRemainReplays_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::RemainReplayResponse>* Service::Stub::PrepareAsyncScanRemainReplaysRaw(::grpc::ClientContext* context, const ::message::RemainReplayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::RemainReplayResponse, ::message::RemainReplayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScanRemainReplays_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::RemainReplayResponse>* Service::Stub::AsyncScanRemainReplaysRaw(::grpc::ClientContext* context, const ::message::RemainReplayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScanRemainReplaysRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::CreateCommandTicket(::grpc::ClientContext* context, const ::message::CommandConfirmRequest& request, ::message::CommandConfirmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::CommandConfirmRequest, ::message::CommandConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCommandTicket_, context, request, response);
}

void Service::Stub::async::CreateCommandTicket(::grpc::ClientContext* context, const ::message::CommandConfirmRequest* request, ::message::CommandConfirmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::CommandConfirmRequest, ::message::CommandConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCommandTicket_, context, request, response, std::move(f));
}

void Service::Stub::async::CreateCommandTicket(::grpc::ClientContext* context, const ::message::CommandConfirmRequest* request, ::message::CommandConfirmResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCommandTicket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::CommandConfirmResponse>* Service::Stub::PrepareAsyncCreateCommandTicketRaw(::grpc::ClientContext* context, const ::message::CommandConfirmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::CommandConfirmResponse, ::message::CommandConfirmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCommandTicket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::CommandConfirmResponse>* Service::Stub::AsyncCreateCommandTicketRaw(::grpc::ClientContext* context, const ::message::CommandConfirmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCommandTicketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::CheckOrCreateAssetLoginTicket(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest& request, ::message::AssetLoginTicketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::AssetLoginTicketRequest, ::message::AssetLoginTicketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckOrCreateAssetLoginTicket_, context, request, response);
}

void Service::Stub::async::CheckOrCreateAssetLoginTicket(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest* request, ::message::AssetLoginTicketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::AssetLoginTicketRequest, ::message::AssetLoginTicketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckOrCreateAssetLoginTicket_, context, request, response, std::move(f));
}

void Service::Stub::async::CheckOrCreateAssetLoginTicket(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest* request, ::message::AssetLoginTicketResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckOrCreateAssetLoginTicket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::AssetLoginTicketResponse>* Service::Stub::PrepareAsyncCheckOrCreateAssetLoginTicketRaw(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::AssetLoginTicketResponse, ::message::AssetLoginTicketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckOrCreateAssetLoginTicket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::AssetLoginTicketResponse>* Service::Stub::AsyncCheckOrCreateAssetLoginTicketRaw(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckOrCreateAssetLoginTicketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::CheckTicketState(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::message::TicketStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::TicketRequest, ::message::TicketStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckTicketState_, context, request, response);
}

void Service::Stub::async::CheckTicketState(::grpc::ClientContext* context, const ::message::TicketRequest* request, ::message::TicketStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::TicketRequest, ::message::TicketStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckTicketState_, context, request, response, std::move(f));
}

void Service::Stub::async::CheckTicketState(::grpc::ClientContext* context, const ::message::TicketRequest* request, ::message::TicketStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckTicketState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::TicketStateResponse>* Service::Stub::PrepareAsyncCheckTicketStateRaw(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::TicketStateResponse, ::message::TicketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckTicketState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::TicketStateResponse>* Service::Stub::AsyncCheckTicketStateRaw(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckTicketStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::CancelTicket(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::message::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::TicketRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelTicket_, context, request, response);
}

void Service::Stub::async::CancelTicket(::grpc::ClientContext* context, const ::message::TicketRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::TicketRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelTicket_, context, request, response, std::move(f));
}

void Service::Stub::async::CancelTicket(::grpc::ClientContext* context, const ::message::TicketRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelTicket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* Service::Stub::PrepareAsyncCancelTicketRaw(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::StatusResponse, ::message::TicketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelTicket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* Service::Stub::AsyncCancelTicketRaw(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelTicketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::CreateForward(::grpc::ClientContext* context, const ::message::ForwardRequest& request, ::message::ForwardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::ForwardRequest, ::message::ForwardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateForward_, context, request, response);
}

void Service::Stub::async::CreateForward(::grpc::ClientContext* context, const ::message::ForwardRequest* request, ::message::ForwardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::ForwardRequest, ::message::ForwardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateForward_, context, request, response, std::move(f));
}

void Service::Stub::async::CreateForward(::grpc::ClientContext* context, const ::message::ForwardRequest* request, ::message::ForwardResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateForward_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::ForwardResponse>* Service::Stub::PrepareAsyncCreateForwardRaw(::grpc::ClientContext* context, const ::message::ForwardRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::ForwardResponse, ::message::ForwardRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateForward_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::ForwardResponse>* Service::Stub::AsyncCreateForwardRaw(::grpc::ClientContext* context, const ::message::ForwardRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateForwardRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::DeleteForward(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest& request, ::message::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::ForwardDeleteRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteForward_, context, request, response);
}

void Service::Stub::async::DeleteForward(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::ForwardDeleteRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteForward_, context, request, response, std::move(f));
}

void Service::Stub::async::DeleteForward(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteForward_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* Service::Stub::PrepareAsyncDeleteForwardRaw(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::StatusResponse, ::message::ForwardDeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteForward_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* Service::Stub::AsyncDeleteForwardRaw(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteForwardRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::GetPublicSetting(::grpc::ClientContext* context, const ::message::Empty& request, ::message::PublicSettingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::Empty, ::message::PublicSettingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPublicSetting_, context, request, response);
}

void Service::Stub::async::GetPublicSetting(::grpc::ClientContext* context, const ::message::Empty* request, ::message::PublicSettingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::Empty, ::message::PublicSettingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPublicSetting_, context, request, response, std::move(f));
}

void Service::Stub::async::GetPublicSetting(::grpc::ClientContext* context, const ::message::Empty* request, ::message::PublicSettingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPublicSetting_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::PublicSettingResponse>* Service::Stub::PrepareAsyncGetPublicSettingRaw(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::PublicSettingResponse, ::message::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPublicSetting_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::PublicSettingResponse>* Service::Stub::AsyncGetPublicSettingRaw(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPublicSettingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::GetListenPorts(::grpc::ClientContext* context, const ::message::Empty& request, ::message::ListenPortResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::Empty, ::message::ListenPortResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetListenPorts_, context, request, response);
}

void Service::Stub::async::GetListenPorts(::grpc::ClientContext* context, const ::message::Empty* request, ::message::ListenPortResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::Empty, ::message::ListenPortResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetListenPorts_, context, request, response, std::move(f));
}

void Service::Stub::async::GetListenPorts(::grpc::ClientContext* context, const ::message::Empty* request, ::message::ListenPortResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetListenPorts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::ListenPortResponse>* Service::Stub::PrepareAsyncGetListenPortsRaw(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::ListenPortResponse, ::message::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetListenPorts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::ListenPortResponse>* Service::Stub::AsyncGetListenPortsRaw(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetListenPortsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::GetPortInfo(::grpc::ClientContext* context, const ::message::PortInfoRequest& request, ::message::PortInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::PortInfoRequest, ::message::PortInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPortInfo_, context, request, response);
}

void Service::Stub::async::GetPortInfo(::grpc::ClientContext* context, const ::message::PortInfoRequest* request, ::message::PortInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::PortInfoRequest, ::message::PortInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPortInfo_, context, request, response, std::move(f));
}

void Service::Stub::async::GetPortInfo(::grpc::ClientContext* context, const ::message::PortInfoRequest* request, ::message::PortInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPortInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::PortInfoResponse>* Service::Stub::PrepareAsyncGetPortInfoRaw(::grpc::ClientContext* context, const ::message::PortInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::PortInfoResponse, ::message::PortInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPortInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::PortInfoResponse>* Service::Stub::AsyncGetPortInfoRaw(::grpc::ClientContext* context, const ::message::PortInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPortInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::HandlePortFailure(::grpc::ClientContext* context, const ::message::PortFailureRequest& request, ::message::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::PortFailureRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HandlePortFailure_, context, request, response);
}

void Service::Stub::async::HandlePortFailure(::grpc::ClientContext* context, const ::message::PortFailureRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::PortFailureRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandlePortFailure_, context, request, response, std::move(f));
}

void Service::Stub::async::HandlePortFailure(::grpc::ClientContext* context, const ::message::PortFailureRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandlePortFailure_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* Service::Stub::PrepareAsyncHandlePortFailureRaw(::grpc::ClientContext* context, const ::message::PortFailureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::StatusResponse, ::message::PortFailureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HandlePortFailure_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* Service::Stub::AsyncHandlePortFailureRaw(::grpc::ClientContext* context, const ::message::PortFailureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandlePortFailureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::CheckUserByCookies(::grpc::ClientContext* context, const ::message::CookiesRequest& request, ::message::UserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::CookiesRequest, ::message::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckUserByCookies_, context, request, response);
}

void Service::Stub::async::CheckUserByCookies(::grpc::ClientContext* context, const ::message::CookiesRequest* request, ::message::UserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::CookiesRequest, ::message::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckUserByCookies_, context, request, response, std::move(f));
}

void Service::Stub::async::CheckUserByCookies(::grpc::ClientContext* context, const ::message::CookiesRequest* request, ::message::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckUserByCookies_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::UserResponse>* Service::Stub::PrepareAsyncCheckUserByCookiesRaw(::grpc::ClientContext* context, const ::message::CookiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::UserResponse, ::message::CookiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckUserByCookies_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::UserResponse>* Service::Stub::AsyncCheckUserByCookiesRaw(::grpc::ClientContext* context, const ::message::CookiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckUserByCookiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::RecordSessionLifecycleLog(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest& request, ::message::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::SessionLifecycleLogRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RecordSessionLifecycleLog_, context, request, response);
}

void Service::Stub::async::RecordSessionLifecycleLog(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::SessionLifecycleLogRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecordSessionLifecycleLog_, context, request, response, std::move(f));
}

void Service::Stub::async::RecordSessionLifecycleLog(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecordSessionLifecycleLog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* Service::Stub::PrepareAsyncRecordSessionLifecycleLogRaw(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::StatusResponse, ::message::SessionLifecycleLogRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RecordSessionLifecycleLog_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* Service::Stub::AsyncRecordSessionLifecycleLogRaw(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecordSessionLifecycleLogRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::FaceRecognitionCallback(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest& request, ::message::FaceRecognitionCallbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::FaceRecognitionCallbackRequest, ::message::FaceRecognitionCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FaceRecognitionCallback_, context, request, response);
}

void Service::Stub::async::FaceRecognitionCallback(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest* request, ::message::FaceRecognitionCallbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::FaceRecognitionCallbackRequest, ::message::FaceRecognitionCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FaceRecognitionCallback_, context, request, response, std::move(f));
}

void Service::Stub::async::FaceRecognitionCallback(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest* request, ::message::FaceRecognitionCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FaceRecognitionCallback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::FaceRecognitionCallbackResponse>* Service::Stub::PrepareAsyncFaceRecognitionCallbackRaw(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::FaceRecognitionCallbackResponse, ::message::FaceRecognitionCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FaceRecognitionCallback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::FaceRecognitionCallbackResponse>* Service::Stub::AsyncFaceRecognitionCallbackRaw(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFaceRecognitionCallbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::FaceMonitorCallback(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest& request, ::message::FaceMonitorCallbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::FaceMonitorCallbackRequest, ::message::FaceMonitorCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FaceMonitorCallback_, context, request, response);
}

void Service::Stub::async::FaceMonitorCallback(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest* request, ::message::FaceMonitorCallbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::FaceMonitorCallbackRequest, ::message::FaceMonitorCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FaceMonitorCallback_, context, request, response, std::move(f));
}

void Service::Stub::async::FaceMonitorCallback(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest* request, ::message::FaceMonitorCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FaceMonitorCallback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::FaceMonitorCallbackResponse>* Service::Stub::PrepareAsyncFaceMonitorCallbackRaw(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::FaceMonitorCallbackResponse, ::message::FaceMonitorCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FaceMonitorCallback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::FaceMonitorCallbackResponse>* Service::Stub::AsyncFaceMonitorCallbackRaw(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFaceMonitorCallbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::JoinFaceMonitor(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest& request, ::message::JoinFaceMonitorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::JoinFaceMonitorRequest, ::message::JoinFaceMonitorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JoinFaceMonitor_, context, request, response);
}

void Service::Stub::async::JoinFaceMonitor(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest* request, ::message::JoinFaceMonitorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::JoinFaceMonitorRequest, ::message::JoinFaceMonitorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinFaceMonitor_, context, request, response, std::move(f));
}

void Service::Stub::async::JoinFaceMonitor(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest* request, ::message::JoinFaceMonitorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinFaceMonitor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::JoinFaceMonitorResponse>* Service::Stub::PrepareAsyncJoinFaceMonitorRaw(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::JoinFaceMonitorResponse, ::message::JoinFaceMonitorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JoinFaceMonitor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::JoinFaceMonitorResponse>* Service::Stub::AsyncJoinFaceMonitorRaw(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJoinFaceMonitorRaw(context, request, cq);
  result->StartCall();
  return result;
}

Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::TokenRequest, ::message::TokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::TokenRequest* req,
             ::message::TokenResponse* resp) {
               return service->GetTokenAuthInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::TokenRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::TokenRequest* req,
             ::message::StatusResponse* resp) {
               return service->RenewToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::SessionCreateRequest, ::message::SessionCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::SessionCreateRequest* req,
             ::message::SessionCreateResponse* resp) {
               return service->CreateSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::SessionFinishRequest, ::message::SessionFinishResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::SessionFinishRequest* req,
             ::message::SessionFinishResp* resp) {
               return service->FinishSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::ReplayRequest, ::message::ReplayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::ReplayRequest* req,
             ::message::ReplayResponse* resp) {
               return service->UploadReplayFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::CommandRequest, ::message::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::CommandRequest* req,
             ::message::CommandResponse* resp) {
               return service->UploadCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[6],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Service::Service, ::message::FinishedTaskRequest, ::message::TaskResponse>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::message::TaskResponse,
             ::message::FinishedTaskRequest>* stream) {
               return service->DispatchTask(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::RemainReplayRequest, ::message::RemainReplayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::RemainReplayRequest* req,
             ::message::RemainReplayResponse* resp) {
               return service->ScanRemainReplays(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::CommandConfirmRequest, ::message::CommandConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::CommandConfirmRequest* req,
             ::message::CommandConfirmResponse* resp) {
               return service->CreateCommandTicket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::AssetLoginTicketRequest, ::message::AssetLoginTicketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::AssetLoginTicketRequest* req,
             ::message::AssetLoginTicketResponse* resp) {
               return service->CheckOrCreateAssetLoginTicket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::TicketRequest, ::message::TicketStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::TicketRequest* req,
             ::message::TicketStateResponse* resp) {
               return service->CheckTicketState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::TicketRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::TicketRequest* req,
             ::message::StatusResponse* resp) {
               return service->CancelTicket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::ForwardRequest, ::message::ForwardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::ForwardRequest* req,
             ::message::ForwardResponse* resp) {
               return service->CreateForward(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::ForwardDeleteRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::ForwardDeleteRequest* req,
             ::message::StatusResponse* resp) {
               return service->DeleteForward(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::Empty, ::message::PublicSettingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::Empty* req,
             ::message::PublicSettingResponse* resp) {
               return service->GetPublicSetting(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::Empty, ::message::ListenPortResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::Empty* req,
             ::message::ListenPortResponse* resp) {
               return service->GetListenPorts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::PortInfoRequest, ::message::PortInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::PortInfoRequest* req,
             ::message::PortInfoResponse* resp) {
               return service->GetPortInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::PortFailureRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::PortFailureRequest* req,
             ::message::StatusResponse* resp) {
               return service->HandlePortFailure(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::CookiesRequest, ::message::UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::CookiesRequest* req,
             ::message::UserResponse* resp) {
               return service->CheckUserByCookies(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::SessionLifecycleLogRequest, ::message::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::SessionLifecycleLogRequest* req,
             ::message::StatusResponse* resp) {
               return service->RecordSessionLifecycleLog(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::FaceRecognitionCallbackRequest, ::message::FaceRecognitionCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::FaceRecognitionCallbackRequest* req,
             ::message::FaceRecognitionCallbackResponse* resp) {
               return service->FaceRecognitionCallback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::FaceMonitorCallbackRequest, ::message::FaceMonitorCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::FaceMonitorCallbackRequest* req,
             ::message::FaceMonitorCallbackResponse* resp) {
               return service->FaceMonitorCallback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::message::JoinFaceMonitorRequest, ::message::JoinFaceMonitorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::JoinFaceMonitorRequest* req,
             ::message::JoinFaceMonitorResponse* resp) {
               return service->JoinFaceMonitor(ctx, req, resp);
             }, this)));
}

Service::Service::~Service() {
}

::grpc::Status Service::Service::GetTokenAuthInfo(::grpc::ServerContext* context, const ::message::TokenRequest* request, ::message::TokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::RenewToken(::grpc::ServerContext* context, const ::message::TokenRequest* request, ::message::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::CreateSession(::grpc::ServerContext* context, const ::message::SessionCreateRequest* request, ::message::SessionCreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::FinishSession(::grpc::ServerContext* context, const ::message::SessionFinishRequest* request, ::message::SessionFinishResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::UploadReplayFile(::grpc::ServerContext* context, const ::message::ReplayRequest* request, ::message::ReplayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::UploadCommand(::grpc::ServerContext* context, const ::message::CommandRequest* request, ::message::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::DispatchTask(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::message::TaskResponse, ::message::FinishedTaskRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::ScanRemainReplays(::grpc::ServerContext* context, const ::message::RemainReplayRequest* request, ::message::RemainReplayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::CreateCommandTicket(::grpc::ServerContext* context, const ::message::CommandConfirmRequest* request, ::message::CommandConfirmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::CheckOrCreateAssetLoginTicket(::grpc::ServerContext* context, const ::message::AssetLoginTicketRequest* request, ::message::AssetLoginTicketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::CheckTicketState(::grpc::ServerContext* context, const ::message::TicketRequest* request, ::message::TicketStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::CancelTicket(::grpc::ServerContext* context, const ::message::TicketRequest* request, ::message::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::CreateForward(::grpc::ServerContext* context, const ::message::ForwardRequest* request, ::message::ForwardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::DeleteForward(::grpc::ServerContext* context, const ::message::ForwardDeleteRequest* request, ::message::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::GetPublicSetting(::grpc::ServerContext* context, const ::message::Empty* request, ::message::PublicSettingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::GetListenPorts(::grpc::ServerContext* context, const ::message::Empty* request, ::message::ListenPortResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::GetPortInfo(::grpc::ServerContext* context, const ::message::PortInfoRequest* request, ::message::PortInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::HandlePortFailure(::grpc::ServerContext* context, const ::message::PortFailureRequest* request, ::message::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::CheckUserByCookies(::grpc::ServerContext* context, const ::message::CookiesRequest* request, ::message::UserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::RecordSessionLifecycleLog(::grpc::ServerContext* context, const ::message::SessionLifecycleLogRequest* request, ::message::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::FaceRecognitionCallback(::grpc::ServerContext* context, const ::message::FaceRecognitionCallbackRequest* request, ::message::FaceRecognitionCallbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::FaceMonitorCallback(::grpc::ServerContext* context, const ::message::FaceMonitorCallbackRequest* request, ::message::FaceMonitorCallbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::JoinFaceMonitor(::grpc::ServerContext* context, const ::message::JoinFaceMonitorRequest* request, ::message::JoinFaceMonitorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace message


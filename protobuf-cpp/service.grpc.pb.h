// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto
#ifndef GRPC_service_2eproto__INCLUDED
#define GRPC_service_2eproto__INCLUDED

#include "service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace message {

class Service final {
 public:
  static constexpr char const* service_full_name() {
    return "message.Service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetTokenAuthInfo(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::message::TokenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::TokenResponse>> AsyncGetTokenAuthInfo(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::TokenResponse>>(AsyncGetTokenAuthInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::TokenResponse>> PrepareAsyncGetTokenAuthInfo(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::TokenResponse>>(PrepareAsyncGetTokenAuthInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status RenewToken(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::message::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> AsyncRenewToken(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(AsyncRenewTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> PrepareAsyncRenewToken(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(PrepareAsyncRenewTokenRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateSession(::grpc::ClientContext* context, const ::message::SessionCreateRequest& request, ::message::SessionCreateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::SessionCreateResponse>> AsyncCreateSession(::grpc::ClientContext* context, const ::message::SessionCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::SessionCreateResponse>>(AsyncCreateSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::SessionCreateResponse>> PrepareAsyncCreateSession(::grpc::ClientContext* context, const ::message::SessionCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::SessionCreateResponse>>(PrepareAsyncCreateSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status FinishSession(::grpc::ClientContext* context, const ::message::SessionFinishRequest& request, ::message::SessionFinishResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::SessionFinishResp>> AsyncFinishSession(::grpc::ClientContext* context, const ::message::SessionFinishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::SessionFinishResp>>(AsyncFinishSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::SessionFinishResp>> PrepareAsyncFinishSession(::grpc::ClientContext* context, const ::message::SessionFinishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::SessionFinishResp>>(PrepareAsyncFinishSessionRaw(context, request, cq));
    }
    virtual ::grpc::Status UploadReplayFile(::grpc::ClientContext* context, const ::message::ReplayRequest& request, ::message::ReplayResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ReplayResponse>> AsyncUploadReplayFile(::grpc::ClientContext* context, const ::message::ReplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ReplayResponse>>(AsyncUploadReplayFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ReplayResponse>> PrepareAsyncUploadReplayFile(::grpc::ClientContext* context, const ::message::ReplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ReplayResponse>>(PrepareAsyncUploadReplayFileRaw(context, request, cq));
    }
    virtual ::grpc::Status UploadCommand(::grpc::ClientContext* context, const ::message::CommandRequest& request, ::message::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::CommandResponse>> AsyncUploadCommand(::grpc::ClientContext* context, const ::message::CommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::CommandResponse>>(AsyncUploadCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::CommandResponse>> PrepareAsyncUploadCommand(::grpc::ClientContext* context, const ::message::CommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::CommandResponse>>(PrepareAsyncUploadCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::message::FinishedTaskRequest, ::message::TaskResponse>> DispatchTask(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::message::FinishedTaskRequest, ::message::TaskResponse>>(DispatchTaskRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::message::FinishedTaskRequest, ::message::TaskResponse>> AsyncDispatchTask(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::message::FinishedTaskRequest, ::message::TaskResponse>>(AsyncDispatchTaskRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::message::FinishedTaskRequest, ::message::TaskResponse>> PrepareAsyncDispatchTask(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::message::FinishedTaskRequest, ::message::TaskResponse>>(PrepareAsyncDispatchTaskRaw(context, cq));
    }
    virtual ::grpc::Status ScanRemainReplays(::grpc::ClientContext* context, const ::message::RemainReplayRequest& request, ::message::RemainReplayResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::RemainReplayResponse>> AsyncScanRemainReplays(::grpc::ClientContext* context, const ::message::RemainReplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::RemainReplayResponse>>(AsyncScanRemainReplaysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::RemainReplayResponse>> PrepareAsyncScanRemainReplays(::grpc::ClientContext* context, const ::message::RemainReplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::RemainReplayResponse>>(PrepareAsyncScanRemainReplaysRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCommandTicket(::grpc::ClientContext* context, const ::message::CommandConfirmRequest& request, ::message::CommandConfirmResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::CommandConfirmResponse>> AsyncCreateCommandTicket(::grpc::ClientContext* context, const ::message::CommandConfirmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::CommandConfirmResponse>>(AsyncCreateCommandTicketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::CommandConfirmResponse>> PrepareAsyncCreateCommandTicket(::grpc::ClientContext* context, const ::message::CommandConfirmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::CommandConfirmResponse>>(PrepareAsyncCreateCommandTicketRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckOrCreateAssetLoginTicket(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest& request, ::message::AssetLoginTicketResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::AssetLoginTicketResponse>> AsyncCheckOrCreateAssetLoginTicket(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::AssetLoginTicketResponse>>(AsyncCheckOrCreateAssetLoginTicketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::AssetLoginTicketResponse>> PrepareAsyncCheckOrCreateAssetLoginTicket(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::AssetLoginTicketResponse>>(PrepareAsyncCheckOrCreateAssetLoginTicketRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckTicketState(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::message::TicketStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::TicketStateResponse>> AsyncCheckTicketState(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::TicketStateResponse>>(AsyncCheckTicketStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::TicketStateResponse>> PrepareAsyncCheckTicketState(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::TicketStateResponse>>(PrepareAsyncCheckTicketStateRaw(context, request, cq));
    }
    virtual ::grpc::Status CancelTicket(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::message::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> AsyncCancelTicket(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(AsyncCancelTicketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> PrepareAsyncCancelTicket(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(PrepareAsyncCancelTicketRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateForward(::grpc::ClientContext* context, const ::message::ForwardRequest& request, ::message::ForwardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ForwardResponse>> AsyncCreateForward(::grpc::ClientContext* context, const ::message::ForwardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ForwardResponse>>(AsyncCreateForwardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ForwardResponse>> PrepareAsyncCreateForward(::grpc::ClientContext* context, const ::message::ForwardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ForwardResponse>>(PrepareAsyncCreateForwardRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteForward(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest& request, ::message::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> AsyncDeleteForward(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(AsyncDeleteForwardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> PrepareAsyncDeleteForward(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(PrepareAsyncDeleteForwardRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPublicSetting(::grpc::ClientContext* context, const ::message::Empty& request, ::message::PublicSettingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PublicSettingResponse>> AsyncGetPublicSetting(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PublicSettingResponse>>(AsyncGetPublicSettingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PublicSettingResponse>> PrepareAsyncGetPublicSetting(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PublicSettingResponse>>(PrepareAsyncGetPublicSettingRaw(context, request, cq));
    }
    virtual ::grpc::Status GetListenPorts(::grpc::ClientContext* context, const ::message::Empty& request, ::message::ListenPortResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ListenPortResponse>> AsyncGetListenPorts(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ListenPortResponse>>(AsyncGetListenPortsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ListenPortResponse>> PrepareAsyncGetListenPorts(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::ListenPortResponse>>(PrepareAsyncGetListenPortsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPortInfo(::grpc::ClientContext* context, const ::message::PortInfoRequest& request, ::message::PortInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PortInfoResponse>> AsyncGetPortInfo(::grpc::ClientContext* context, const ::message::PortInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PortInfoResponse>>(AsyncGetPortInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PortInfoResponse>> PrepareAsyncGetPortInfo(::grpc::ClientContext* context, const ::message::PortInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::PortInfoResponse>>(PrepareAsyncGetPortInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status HandlePortFailure(::grpc::ClientContext* context, const ::message::PortFailureRequest& request, ::message::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> AsyncHandlePortFailure(::grpc::ClientContext* context, const ::message::PortFailureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(AsyncHandlePortFailureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> PrepareAsyncHandlePortFailure(::grpc::ClientContext* context, const ::message::PortFailureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(PrepareAsyncHandlePortFailureRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckUserByCookies(::grpc::ClientContext* context, const ::message::CookiesRequest& request, ::message::UserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::UserResponse>> AsyncCheckUserByCookies(::grpc::ClientContext* context, const ::message::CookiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::UserResponse>>(AsyncCheckUserByCookiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::UserResponse>> PrepareAsyncCheckUserByCookies(::grpc::ClientContext* context, const ::message::CookiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::UserResponse>>(PrepareAsyncCheckUserByCookiesRaw(context, request, cq));
    }
    virtual ::grpc::Status RecordSessionLifecycleLog(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest& request, ::message::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> AsyncRecordSessionLifecycleLog(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(AsyncRecordSessionLifecycleLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>> PrepareAsyncRecordSessionLifecycleLog(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>>(PrepareAsyncRecordSessionLifecycleLogRaw(context, request, cq));
    }
    virtual ::grpc::Status FaceRecognitionCallback(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest& request, ::message::FaceRecognitionCallbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::FaceRecognitionCallbackResponse>> AsyncFaceRecognitionCallback(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::FaceRecognitionCallbackResponse>>(AsyncFaceRecognitionCallbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::FaceRecognitionCallbackResponse>> PrepareAsyncFaceRecognitionCallback(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::FaceRecognitionCallbackResponse>>(PrepareAsyncFaceRecognitionCallbackRaw(context, request, cq));
    }
    virtual ::grpc::Status FaceMonitorCallback(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest& request, ::message::FaceMonitorCallbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::FaceMonitorCallbackResponse>> AsyncFaceMonitorCallback(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::FaceMonitorCallbackResponse>>(AsyncFaceMonitorCallbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::FaceMonitorCallbackResponse>> PrepareAsyncFaceMonitorCallback(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::FaceMonitorCallbackResponse>>(PrepareAsyncFaceMonitorCallbackRaw(context, request, cq));
    }
    virtual ::grpc::Status JoinFaceMonitor(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest& request, ::message::JoinFaceMonitorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::JoinFaceMonitorResponse>> AsyncJoinFaceMonitor(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::JoinFaceMonitorResponse>>(AsyncJoinFaceMonitorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::JoinFaceMonitorResponse>> PrepareAsyncJoinFaceMonitor(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::message::JoinFaceMonitorResponse>>(PrepareAsyncJoinFaceMonitorRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetTokenAuthInfo(::grpc::ClientContext* context, const ::message::TokenRequest* request, ::message::TokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTokenAuthInfo(::grpc::ClientContext* context, const ::message::TokenRequest* request, ::message::TokenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RenewToken(::grpc::ClientContext* context, const ::message::TokenRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RenewToken(::grpc::ClientContext* context, const ::message::TokenRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateSession(::grpc::ClientContext* context, const ::message::SessionCreateRequest* request, ::message::SessionCreateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSession(::grpc::ClientContext* context, const ::message::SessionCreateRequest* request, ::message::SessionCreateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FinishSession(::grpc::ClientContext* context, const ::message::SessionFinishRequest* request, ::message::SessionFinishResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FinishSession(::grpc::ClientContext* context, const ::message::SessionFinishRequest* request, ::message::SessionFinishResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UploadReplayFile(::grpc::ClientContext* context, const ::message::ReplayRequest* request, ::message::ReplayResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UploadReplayFile(::grpc::ClientContext* context, const ::message::ReplayRequest* request, ::message::ReplayResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UploadCommand(::grpc::ClientContext* context, const ::message::CommandRequest* request, ::message::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UploadCommand(::grpc::ClientContext* context, const ::message::CommandRequest* request, ::message::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DispatchTask(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::message::FinishedTaskRequest,::message::TaskResponse>* reactor) = 0;
      virtual void ScanRemainReplays(::grpc::ClientContext* context, const ::message::RemainReplayRequest* request, ::message::RemainReplayResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScanRemainReplays(::grpc::ClientContext* context, const ::message::RemainReplayRequest* request, ::message::RemainReplayResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateCommandTicket(::grpc::ClientContext* context, const ::message::CommandConfirmRequest* request, ::message::CommandConfirmResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCommandTicket(::grpc::ClientContext* context, const ::message::CommandConfirmRequest* request, ::message::CommandConfirmResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CheckOrCreateAssetLoginTicket(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest* request, ::message::AssetLoginTicketResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckOrCreateAssetLoginTicket(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest* request, ::message::AssetLoginTicketResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CheckTicketState(::grpc::ClientContext* context, const ::message::TicketRequest* request, ::message::TicketStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckTicketState(::grpc::ClientContext* context, const ::message::TicketRequest* request, ::message::TicketStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CancelTicket(::grpc::ClientContext* context, const ::message::TicketRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelTicket(::grpc::ClientContext* context, const ::message::TicketRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateForward(::grpc::ClientContext* context, const ::message::ForwardRequest* request, ::message::ForwardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateForward(::grpc::ClientContext* context, const ::message::ForwardRequest* request, ::message::ForwardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteForward(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteForward(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPublicSetting(::grpc::ClientContext* context, const ::message::Empty* request, ::message::PublicSettingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPublicSetting(::grpc::ClientContext* context, const ::message::Empty* request, ::message::PublicSettingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetListenPorts(::grpc::ClientContext* context, const ::message::Empty* request, ::message::ListenPortResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetListenPorts(::grpc::ClientContext* context, const ::message::Empty* request, ::message::ListenPortResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPortInfo(::grpc::ClientContext* context, const ::message::PortInfoRequest* request, ::message::PortInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPortInfo(::grpc::ClientContext* context, const ::message::PortInfoRequest* request, ::message::PortInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HandlePortFailure(::grpc::ClientContext* context, const ::message::PortFailureRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HandlePortFailure(::grpc::ClientContext* context, const ::message::PortFailureRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CheckUserByCookies(::grpc::ClientContext* context, const ::message::CookiesRequest* request, ::message::UserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckUserByCookies(::grpc::ClientContext* context, const ::message::CookiesRequest* request, ::message::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RecordSessionLifecycleLog(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RecordSessionLifecycleLog(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FaceRecognitionCallback(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest* request, ::message::FaceRecognitionCallbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FaceRecognitionCallback(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest* request, ::message::FaceRecognitionCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FaceMonitorCallback(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest* request, ::message::FaceMonitorCallbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FaceMonitorCallback(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest* request, ::message::FaceMonitorCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void JoinFaceMonitor(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest* request, ::message::JoinFaceMonitorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void JoinFaceMonitor(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest* request, ::message::JoinFaceMonitorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::TokenResponse>* AsyncGetTokenAuthInfoRaw(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::TokenResponse>* PrepareAsyncGetTokenAuthInfoRaw(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* AsyncRenewTokenRaw(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* PrepareAsyncRenewTokenRaw(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::SessionCreateResponse>* AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::message::SessionCreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::SessionCreateResponse>* PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::message::SessionCreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::SessionFinishResp>* AsyncFinishSessionRaw(::grpc::ClientContext* context, const ::message::SessionFinishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::SessionFinishResp>* PrepareAsyncFinishSessionRaw(::grpc::ClientContext* context, const ::message::SessionFinishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::ReplayResponse>* AsyncUploadReplayFileRaw(::grpc::ClientContext* context, const ::message::ReplayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::ReplayResponse>* PrepareAsyncUploadReplayFileRaw(::grpc::ClientContext* context, const ::message::ReplayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::CommandResponse>* AsyncUploadCommandRaw(::grpc::ClientContext* context, const ::message::CommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::CommandResponse>* PrepareAsyncUploadCommandRaw(::grpc::ClientContext* context, const ::message::CommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::message::FinishedTaskRequest, ::message::TaskResponse>* DispatchTaskRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::message::FinishedTaskRequest, ::message::TaskResponse>* AsyncDispatchTaskRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::message::FinishedTaskRequest, ::message::TaskResponse>* PrepareAsyncDispatchTaskRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::RemainReplayResponse>* AsyncScanRemainReplaysRaw(::grpc::ClientContext* context, const ::message::RemainReplayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::RemainReplayResponse>* PrepareAsyncScanRemainReplaysRaw(::grpc::ClientContext* context, const ::message::RemainReplayRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::CommandConfirmResponse>* AsyncCreateCommandTicketRaw(::grpc::ClientContext* context, const ::message::CommandConfirmRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::CommandConfirmResponse>* PrepareAsyncCreateCommandTicketRaw(::grpc::ClientContext* context, const ::message::CommandConfirmRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::AssetLoginTicketResponse>* AsyncCheckOrCreateAssetLoginTicketRaw(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::AssetLoginTicketResponse>* PrepareAsyncCheckOrCreateAssetLoginTicketRaw(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::TicketStateResponse>* AsyncCheckTicketStateRaw(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::TicketStateResponse>* PrepareAsyncCheckTicketStateRaw(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* AsyncCancelTicketRaw(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* PrepareAsyncCancelTicketRaw(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::ForwardResponse>* AsyncCreateForwardRaw(::grpc::ClientContext* context, const ::message::ForwardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::ForwardResponse>* PrepareAsyncCreateForwardRaw(::grpc::ClientContext* context, const ::message::ForwardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* AsyncDeleteForwardRaw(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* PrepareAsyncDeleteForwardRaw(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::PublicSettingResponse>* AsyncGetPublicSettingRaw(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::PublicSettingResponse>* PrepareAsyncGetPublicSettingRaw(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::ListenPortResponse>* AsyncGetListenPortsRaw(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::ListenPortResponse>* PrepareAsyncGetListenPortsRaw(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::PortInfoResponse>* AsyncGetPortInfoRaw(::grpc::ClientContext* context, const ::message::PortInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::PortInfoResponse>* PrepareAsyncGetPortInfoRaw(::grpc::ClientContext* context, const ::message::PortInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* AsyncHandlePortFailureRaw(::grpc::ClientContext* context, const ::message::PortFailureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* PrepareAsyncHandlePortFailureRaw(::grpc::ClientContext* context, const ::message::PortFailureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::UserResponse>* AsyncCheckUserByCookiesRaw(::grpc::ClientContext* context, const ::message::CookiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::UserResponse>* PrepareAsyncCheckUserByCookiesRaw(::grpc::ClientContext* context, const ::message::CookiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* AsyncRecordSessionLifecycleLogRaw(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::StatusResponse>* PrepareAsyncRecordSessionLifecycleLogRaw(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::FaceRecognitionCallbackResponse>* AsyncFaceRecognitionCallbackRaw(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::FaceRecognitionCallbackResponse>* PrepareAsyncFaceRecognitionCallbackRaw(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::FaceMonitorCallbackResponse>* AsyncFaceMonitorCallbackRaw(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::FaceMonitorCallbackResponse>* PrepareAsyncFaceMonitorCallbackRaw(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::JoinFaceMonitorResponse>* AsyncJoinFaceMonitorRaw(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::message::JoinFaceMonitorResponse>* PrepareAsyncJoinFaceMonitorRaw(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetTokenAuthInfo(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::message::TokenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::TokenResponse>> AsyncGetTokenAuthInfo(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::TokenResponse>>(AsyncGetTokenAuthInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::TokenResponse>> PrepareAsyncGetTokenAuthInfo(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::TokenResponse>>(PrepareAsyncGetTokenAuthInfoRaw(context, request, cq));
    }
    ::grpc::Status RenewToken(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::message::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> AsyncRenewToken(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(AsyncRenewTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> PrepareAsyncRenewToken(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(PrepareAsyncRenewTokenRaw(context, request, cq));
    }
    ::grpc::Status CreateSession(::grpc::ClientContext* context, const ::message::SessionCreateRequest& request, ::message::SessionCreateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::SessionCreateResponse>> AsyncCreateSession(::grpc::ClientContext* context, const ::message::SessionCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::SessionCreateResponse>>(AsyncCreateSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::SessionCreateResponse>> PrepareAsyncCreateSession(::grpc::ClientContext* context, const ::message::SessionCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::SessionCreateResponse>>(PrepareAsyncCreateSessionRaw(context, request, cq));
    }
    ::grpc::Status FinishSession(::grpc::ClientContext* context, const ::message::SessionFinishRequest& request, ::message::SessionFinishResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::SessionFinishResp>> AsyncFinishSession(::grpc::ClientContext* context, const ::message::SessionFinishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::SessionFinishResp>>(AsyncFinishSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::SessionFinishResp>> PrepareAsyncFinishSession(::grpc::ClientContext* context, const ::message::SessionFinishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::SessionFinishResp>>(PrepareAsyncFinishSessionRaw(context, request, cq));
    }
    ::grpc::Status UploadReplayFile(::grpc::ClientContext* context, const ::message::ReplayRequest& request, ::message::ReplayResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ReplayResponse>> AsyncUploadReplayFile(::grpc::ClientContext* context, const ::message::ReplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ReplayResponse>>(AsyncUploadReplayFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ReplayResponse>> PrepareAsyncUploadReplayFile(::grpc::ClientContext* context, const ::message::ReplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ReplayResponse>>(PrepareAsyncUploadReplayFileRaw(context, request, cq));
    }
    ::grpc::Status UploadCommand(::grpc::ClientContext* context, const ::message::CommandRequest& request, ::message::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::CommandResponse>> AsyncUploadCommand(::grpc::ClientContext* context, const ::message::CommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::CommandResponse>>(AsyncUploadCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::CommandResponse>> PrepareAsyncUploadCommand(::grpc::ClientContext* context, const ::message::CommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::CommandResponse>>(PrepareAsyncUploadCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::message::FinishedTaskRequest, ::message::TaskResponse>> DispatchTask(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::message::FinishedTaskRequest, ::message::TaskResponse>>(DispatchTaskRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::message::FinishedTaskRequest, ::message::TaskResponse>> AsyncDispatchTask(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::message::FinishedTaskRequest, ::message::TaskResponse>>(AsyncDispatchTaskRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::message::FinishedTaskRequest, ::message::TaskResponse>> PrepareAsyncDispatchTask(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::message::FinishedTaskRequest, ::message::TaskResponse>>(PrepareAsyncDispatchTaskRaw(context, cq));
    }
    ::grpc::Status ScanRemainReplays(::grpc::ClientContext* context, const ::message::RemainReplayRequest& request, ::message::RemainReplayResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::RemainReplayResponse>> AsyncScanRemainReplays(::grpc::ClientContext* context, const ::message::RemainReplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::RemainReplayResponse>>(AsyncScanRemainReplaysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::RemainReplayResponse>> PrepareAsyncScanRemainReplays(::grpc::ClientContext* context, const ::message::RemainReplayRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::RemainReplayResponse>>(PrepareAsyncScanRemainReplaysRaw(context, request, cq));
    }
    ::grpc::Status CreateCommandTicket(::grpc::ClientContext* context, const ::message::CommandConfirmRequest& request, ::message::CommandConfirmResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::CommandConfirmResponse>> AsyncCreateCommandTicket(::grpc::ClientContext* context, const ::message::CommandConfirmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::CommandConfirmResponse>>(AsyncCreateCommandTicketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::CommandConfirmResponse>> PrepareAsyncCreateCommandTicket(::grpc::ClientContext* context, const ::message::CommandConfirmRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::CommandConfirmResponse>>(PrepareAsyncCreateCommandTicketRaw(context, request, cq));
    }
    ::grpc::Status CheckOrCreateAssetLoginTicket(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest& request, ::message::AssetLoginTicketResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::AssetLoginTicketResponse>> AsyncCheckOrCreateAssetLoginTicket(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::AssetLoginTicketResponse>>(AsyncCheckOrCreateAssetLoginTicketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::AssetLoginTicketResponse>> PrepareAsyncCheckOrCreateAssetLoginTicket(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::AssetLoginTicketResponse>>(PrepareAsyncCheckOrCreateAssetLoginTicketRaw(context, request, cq));
    }
    ::grpc::Status CheckTicketState(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::message::TicketStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::TicketStateResponse>> AsyncCheckTicketState(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::TicketStateResponse>>(AsyncCheckTicketStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::TicketStateResponse>> PrepareAsyncCheckTicketState(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::TicketStateResponse>>(PrepareAsyncCheckTicketStateRaw(context, request, cq));
    }
    ::grpc::Status CancelTicket(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::message::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> AsyncCancelTicket(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(AsyncCancelTicketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> PrepareAsyncCancelTicket(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(PrepareAsyncCancelTicketRaw(context, request, cq));
    }
    ::grpc::Status CreateForward(::grpc::ClientContext* context, const ::message::ForwardRequest& request, ::message::ForwardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ForwardResponse>> AsyncCreateForward(::grpc::ClientContext* context, const ::message::ForwardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ForwardResponse>>(AsyncCreateForwardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ForwardResponse>> PrepareAsyncCreateForward(::grpc::ClientContext* context, const ::message::ForwardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ForwardResponse>>(PrepareAsyncCreateForwardRaw(context, request, cq));
    }
    ::grpc::Status DeleteForward(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest& request, ::message::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> AsyncDeleteForward(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(AsyncDeleteForwardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> PrepareAsyncDeleteForward(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(PrepareAsyncDeleteForwardRaw(context, request, cq));
    }
    ::grpc::Status GetPublicSetting(::grpc::ClientContext* context, const ::message::Empty& request, ::message::PublicSettingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PublicSettingResponse>> AsyncGetPublicSetting(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PublicSettingResponse>>(AsyncGetPublicSettingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PublicSettingResponse>> PrepareAsyncGetPublicSetting(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PublicSettingResponse>>(PrepareAsyncGetPublicSettingRaw(context, request, cq));
    }
    ::grpc::Status GetListenPorts(::grpc::ClientContext* context, const ::message::Empty& request, ::message::ListenPortResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ListenPortResponse>> AsyncGetListenPorts(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ListenPortResponse>>(AsyncGetListenPortsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ListenPortResponse>> PrepareAsyncGetListenPorts(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::ListenPortResponse>>(PrepareAsyncGetListenPortsRaw(context, request, cq));
    }
    ::grpc::Status GetPortInfo(::grpc::ClientContext* context, const ::message::PortInfoRequest& request, ::message::PortInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PortInfoResponse>> AsyncGetPortInfo(::grpc::ClientContext* context, const ::message::PortInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PortInfoResponse>>(AsyncGetPortInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PortInfoResponse>> PrepareAsyncGetPortInfo(::grpc::ClientContext* context, const ::message::PortInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::PortInfoResponse>>(PrepareAsyncGetPortInfoRaw(context, request, cq));
    }
    ::grpc::Status HandlePortFailure(::grpc::ClientContext* context, const ::message::PortFailureRequest& request, ::message::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> AsyncHandlePortFailure(::grpc::ClientContext* context, const ::message::PortFailureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(AsyncHandlePortFailureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> PrepareAsyncHandlePortFailure(::grpc::ClientContext* context, const ::message::PortFailureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(PrepareAsyncHandlePortFailureRaw(context, request, cq));
    }
    ::grpc::Status CheckUserByCookies(::grpc::ClientContext* context, const ::message::CookiesRequest& request, ::message::UserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::UserResponse>> AsyncCheckUserByCookies(::grpc::ClientContext* context, const ::message::CookiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::UserResponse>>(AsyncCheckUserByCookiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::UserResponse>> PrepareAsyncCheckUserByCookies(::grpc::ClientContext* context, const ::message::CookiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::UserResponse>>(PrepareAsyncCheckUserByCookiesRaw(context, request, cq));
    }
    ::grpc::Status RecordSessionLifecycleLog(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest& request, ::message::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> AsyncRecordSessionLifecycleLog(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(AsyncRecordSessionLifecycleLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>> PrepareAsyncRecordSessionLifecycleLog(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>>(PrepareAsyncRecordSessionLifecycleLogRaw(context, request, cq));
    }
    ::grpc::Status FaceRecognitionCallback(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest& request, ::message::FaceRecognitionCallbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::FaceRecognitionCallbackResponse>> AsyncFaceRecognitionCallback(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::FaceRecognitionCallbackResponse>>(AsyncFaceRecognitionCallbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::FaceRecognitionCallbackResponse>> PrepareAsyncFaceRecognitionCallback(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::FaceRecognitionCallbackResponse>>(PrepareAsyncFaceRecognitionCallbackRaw(context, request, cq));
    }
    ::grpc::Status FaceMonitorCallback(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest& request, ::message::FaceMonitorCallbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::FaceMonitorCallbackResponse>> AsyncFaceMonitorCallback(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::FaceMonitorCallbackResponse>>(AsyncFaceMonitorCallbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::FaceMonitorCallbackResponse>> PrepareAsyncFaceMonitorCallback(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::FaceMonitorCallbackResponse>>(PrepareAsyncFaceMonitorCallbackRaw(context, request, cq));
    }
    ::grpc::Status JoinFaceMonitor(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest& request, ::message::JoinFaceMonitorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::JoinFaceMonitorResponse>> AsyncJoinFaceMonitor(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::JoinFaceMonitorResponse>>(AsyncJoinFaceMonitorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::JoinFaceMonitorResponse>> PrepareAsyncJoinFaceMonitor(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::message::JoinFaceMonitorResponse>>(PrepareAsyncJoinFaceMonitorRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetTokenAuthInfo(::grpc::ClientContext* context, const ::message::TokenRequest* request, ::message::TokenResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTokenAuthInfo(::grpc::ClientContext* context, const ::message::TokenRequest* request, ::message::TokenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RenewToken(::grpc::ClientContext* context, const ::message::TokenRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void RenewToken(::grpc::ClientContext* context, const ::message::TokenRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateSession(::grpc::ClientContext* context, const ::message::SessionCreateRequest* request, ::message::SessionCreateResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateSession(::grpc::ClientContext* context, const ::message::SessionCreateRequest* request, ::message::SessionCreateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FinishSession(::grpc::ClientContext* context, const ::message::SessionFinishRequest* request, ::message::SessionFinishResp* response, std::function<void(::grpc::Status)>) override;
      void FinishSession(::grpc::ClientContext* context, const ::message::SessionFinishRequest* request, ::message::SessionFinishResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UploadReplayFile(::grpc::ClientContext* context, const ::message::ReplayRequest* request, ::message::ReplayResponse* response, std::function<void(::grpc::Status)>) override;
      void UploadReplayFile(::grpc::ClientContext* context, const ::message::ReplayRequest* request, ::message::ReplayResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UploadCommand(::grpc::ClientContext* context, const ::message::CommandRequest* request, ::message::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void UploadCommand(::grpc::ClientContext* context, const ::message::CommandRequest* request, ::message::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DispatchTask(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::message::FinishedTaskRequest,::message::TaskResponse>* reactor) override;
      void ScanRemainReplays(::grpc::ClientContext* context, const ::message::RemainReplayRequest* request, ::message::RemainReplayResponse* response, std::function<void(::grpc::Status)>) override;
      void ScanRemainReplays(::grpc::ClientContext* context, const ::message::RemainReplayRequest* request, ::message::RemainReplayResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateCommandTicket(::grpc::ClientContext* context, const ::message::CommandConfirmRequest* request, ::message::CommandConfirmResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateCommandTicket(::grpc::ClientContext* context, const ::message::CommandConfirmRequest* request, ::message::CommandConfirmResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckOrCreateAssetLoginTicket(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest* request, ::message::AssetLoginTicketResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckOrCreateAssetLoginTicket(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest* request, ::message::AssetLoginTicketResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckTicketState(::grpc::ClientContext* context, const ::message::TicketRequest* request, ::message::TicketStateResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckTicketState(::grpc::ClientContext* context, const ::message::TicketRequest* request, ::message::TicketStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelTicket(::grpc::ClientContext* context, const ::message::TicketRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelTicket(::grpc::ClientContext* context, const ::message::TicketRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateForward(::grpc::ClientContext* context, const ::message::ForwardRequest* request, ::message::ForwardResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateForward(::grpc::ClientContext* context, const ::message::ForwardRequest* request, ::message::ForwardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteForward(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteForward(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPublicSetting(::grpc::ClientContext* context, const ::message::Empty* request, ::message::PublicSettingResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPublicSetting(::grpc::ClientContext* context, const ::message::Empty* request, ::message::PublicSettingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetListenPorts(::grpc::ClientContext* context, const ::message::Empty* request, ::message::ListenPortResponse* response, std::function<void(::grpc::Status)>) override;
      void GetListenPorts(::grpc::ClientContext* context, const ::message::Empty* request, ::message::ListenPortResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPortInfo(::grpc::ClientContext* context, const ::message::PortInfoRequest* request, ::message::PortInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPortInfo(::grpc::ClientContext* context, const ::message::PortInfoRequest* request, ::message::PortInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HandlePortFailure(::grpc::ClientContext* context, const ::message::PortFailureRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void HandlePortFailure(::grpc::ClientContext* context, const ::message::PortFailureRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckUserByCookies(::grpc::ClientContext* context, const ::message::CookiesRequest* request, ::message::UserResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckUserByCookies(::grpc::ClientContext* context, const ::message::CookiesRequest* request, ::message::UserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RecordSessionLifecycleLog(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest* request, ::message::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void RecordSessionLifecycleLog(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest* request, ::message::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FaceRecognitionCallback(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest* request, ::message::FaceRecognitionCallbackResponse* response, std::function<void(::grpc::Status)>) override;
      void FaceRecognitionCallback(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest* request, ::message::FaceRecognitionCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FaceMonitorCallback(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest* request, ::message::FaceMonitorCallbackResponse* response, std::function<void(::grpc::Status)>) override;
      void FaceMonitorCallback(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest* request, ::message::FaceMonitorCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void JoinFaceMonitor(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest* request, ::message::JoinFaceMonitorResponse* response, std::function<void(::grpc::Status)>) override;
      void JoinFaceMonitor(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest* request, ::message::JoinFaceMonitorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::message::TokenResponse>* AsyncGetTokenAuthInfoRaw(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::TokenResponse>* PrepareAsyncGetTokenAuthInfoRaw(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* AsyncRenewTokenRaw(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* PrepareAsyncRenewTokenRaw(::grpc::ClientContext* context, const ::message::TokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::SessionCreateResponse>* AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::message::SessionCreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::SessionCreateResponse>* PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::message::SessionCreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::SessionFinishResp>* AsyncFinishSessionRaw(::grpc::ClientContext* context, const ::message::SessionFinishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::SessionFinishResp>* PrepareAsyncFinishSessionRaw(::grpc::ClientContext* context, const ::message::SessionFinishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::ReplayResponse>* AsyncUploadReplayFileRaw(::grpc::ClientContext* context, const ::message::ReplayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::ReplayResponse>* PrepareAsyncUploadReplayFileRaw(::grpc::ClientContext* context, const ::message::ReplayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::CommandResponse>* AsyncUploadCommandRaw(::grpc::ClientContext* context, const ::message::CommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::CommandResponse>* PrepareAsyncUploadCommandRaw(::grpc::ClientContext* context, const ::message::CommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::message::FinishedTaskRequest, ::message::TaskResponse>* DispatchTaskRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::message::FinishedTaskRequest, ::message::TaskResponse>* AsyncDispatchTaskRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::message::FinishedTaskRequest, ::message::TaskResponse>* PrepareAsyncDispatchTaskRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::RemainReplayResponse>* AsyncScanRemainReplaysRaw(::grpc::ClientContext* context, const ::message::RemainReplayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::RemainReplayResponse>* PrepareAsyncScanRemainReplaysRaw(::grpc::ClientContext* context, const ::message::RemainReplayRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::CommandConfirmResponse>* AsyncCreateCommandTicketRaw(::grpc::ClientContext* context, const ::message::CommandConfirmRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::CommandConfirmResponse>* PrepareAsyncCreateCommandTicketRaw(::grpc::ClientContext* context, const ::message::CommandConfirmRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::AssetLoginTicketResponse>* AsyncCheckOrCreateAssetLoginTicketRaw(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::AssetLoginTicketResponse>* PrepareAsyncCheckOrCreateAssetLoginTicketRaw(::grpc::ClientContext* context, const ::message::AssetLoginTicketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::TicketStateResponse>* AsyncCheckTicketStateRaw(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::TicketStateResponse>* PrepareAsyncCheckTicketStateRaw(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* AsyncCancelTicketRaw(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* PrepareAsyncCancelTicketRaw(::grpc::ClientContext* context, const ::message::TicketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::ForwardResponse>* AsyncCreateForwardRaw(::grpc::ClientContext* context, const ::message::ForwardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::ForwardResponse>* PrepareAsyncCreateForwardRaw(::grpc::ClientContext* context, const ::message::ForwardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* AsyncDeleteForwardRaw(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* PrepareAsyncDeleteForwardRaw(::grpc::ClientContext* context, const ::message::ForwardDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::PublicSettingResponse>* AsyncGetPublicSettingRaw(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::PublicSettingResponse>* PrepareAsyncGetPublicSettingRaw(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::ListenPortResponse>* AsyncGetListenPortsRaw(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::ListenPortResponse>* PrepareAsyncGetListenPortsRaw(::grpc::ClientContext* context, const ::message::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::PortInfoResponse>* AsyncGetPortInfoRaw(::grpc::ClientContext* context, const ::message::PortInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::PortInfoResponse>* PrepareAsyncGetPortInfoRaw(::grpc::ClientContext* context, const ::message::PortInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* AsyncHandlePortFailureRaw(::grpc::ClientContext* context, const ::message::PortFailureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* PrepareAsyncHandlePortFailureRaw(::grpc::ClientContext* context, const ::message::PortFailureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::UserResponse>* AsyncCheckUserByCookiesRaw(::grpc::ClientContext* context, const ::message::CookiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::UserResponse>* PrepareAsyncCheckUserByCookiesRaw(::grpc::ClientContext* context, const ::message::CookiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* AsyncRecordSessionLifecycleLogRaw(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::StatusResponse>* PrepareAsyncRecordSessionLifecycleLogRaw(::grpc::ClientContext* context, const ::message::SessionLifecycleLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::FaceRecognitionCallbackResponse>* AsyncFaceRecognitionCallbackRaw(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::FaceRecognitionCallbackResponse>* PrepareAsyncFaceRecognitionCallbackRaw(::grpc::ClientContext* context, const ::message::FaceRecognitionCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::FaceMonitorCallbackResponse>* AsyncFaceMonitorCallbackRaw(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::FaceMonitorCallbackResponse>* PrepareAsyncFaceMonitorCallbackRaw(::grpc::ClientContext* context, const ::message::FaceMonitorCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::JoinFaceMonitorResponse>* AsyncJoinFaceMonitorRaw(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::message::JoinFaceMonitorResponse>* PrepareAsyncJoinFaceMonitorRaw(::grpc::ClientContext* context, const ::message::JoinFaceMonitorRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetTokenAuthInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_RenewToken_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSession_;
    const ::grpc::internal::RpcMethod rpcmethod_FinishSession_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadReplayFile_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_DispatchTask_;
    const ::grpc::internal::RpcMethod rpcmethod_ScanRemainReplays_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCommandTicket_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckOrCreateAssetLoginTicket_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckTicketState_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelTicket_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateForward_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteForward_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPublicSetting_;
    const ::grpc::internal::RpcMethod rpcmethod_GetListenPorts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPortInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_HandlePortFailure_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckUserByCookies_;
    const ::grpc::internal::RpcMethod rpcmethod_RecordSessionLifecycleLog_;
    const ::grpc::internal::RpcMethod rpcmethod_FaceRecognitionCallback_;
    const ::grpc::internal::RpcMethod rpcmethod_FaceMonitorCallback_;
    const ::grpc::internal::RpcMethod rpcmethod_JoinFaceMonitor_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetTokenAuthInfo(::grpc::ServerContext* context, const ::message::TokenRequest* request, ::message::TokenResponse* response);
    virtual ::grpc::Status RenewToken(::grpc::ServerContext* context, const ::message::TokenRequest* request, ::message::StatusResponse* response);
    virtual ::grpc::Status CreateSession(::grpc::ServerContext* context, const ::message::SessionCreateRequest* request, ::message::SessionCreateResponse* response);
    virtual ::grpc::Status FinishSession(::grpc::ServerContext* context, const ::message::SessionFinishRequest* request, ::message::SessionFinishResp* response);
    virtual ::grpc::Status UploadReplayFile(::grpc::ServerContext* context, const ::message::ReplayRequest* request, ::message::ReplayResponse* response);
    virtual ::grpc::Status UploadCommand(::grpc::ServerContext* context, const ::message::CommandRequest* request, ::message::CommandResponse* response);
    virtual ::grpc::Status DispatchTask(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::message::TaskResponse, ::message::FinishedTaskRequest>* stream);
    virtual ::grpc::Status ScanRemainReplays(::grpc::ServerContext* context, const ::message::RemainReplayRequest* request, ::message::RemainReplayResponse* response);
    virtual ::grpc::Status CreateCommandTicket(::grpc::ServerContext* context, const ::message::CommandConfirmRequest* request, ::message::CommandConfirmResponse* response);
    virtual ::grpc::Status CheckOrCreateAssetLoginTicket(::grpc::ServerContext* context, const ::message::AssetLoginTicketRequest* request, ::message::AssetLoginTicketResponse* response);
    virtual ::grpc::Status CheckTicketState(::grpc::ServerContext* context, const ::message::TicketRequest* request, ::message::TicketStateResponse* response);
    virtual ::grpc::Status CancelTicket(::grpc::ServerContext* context, const ::message::TicketRequest* request, ::message::StatusResponse* response);
    virtual ::grpc::Status CreateForward(::grpc::ServerContext* context, const ::message::ForwardRequest* request, ::message::ForwardResponse* response);
    virtual ::grpc::Status DeleteForward(::grpc::ServerContext* context, const ::message::ForwardDeleteRequest* request, ::message::StatusResponse* response);
    virtual ::grpc::Status GetPublicSetting(::grpc::ServerContext* context, const ::message::Empty* request, ::message::PublicSettingResponse* response);
    virtual ::grpc::Status GetListenPorts(::grpc::ServerContext* context, const ::message::Empty* request, ::message::ListenPortResponse* response);
    virtual ::grpc::Status GetPortInfo(::grpc::ServerContext* context, const ::message::PortInfoRequest* request, ::message::PortInfoResponse* response);
    virtual ::grpc::Status HandlePortFailure(::grpc::ServerContext* context, const ::message::PortFailureRequest* request, ::message::StatusResponse* response);
    virtual ::grpc::Status CheckUserByCookies(::grpc::ServerContext* context, const ::message::CookiesRequest* request, ::message::UserResponse* response);
    virtual ::grpc::Status RecordSessionLifecycleLog(::grpc::ServerContext* context, const ::message::SessionLifecycleLogRequest* request, ::message::StatusResponse* response);
    virtual ::grpc::Status FaceRecognitionCallback(::grpc::ServerContext* context, const ::message::FaceRecognitionCallbackRequest* request, ::message::FaceRecognitionCallbackResponse* response);
    virtual ::grpc::Status FaceMonitorCallback(::grpc::ServerContext* context, const ::message::FaceMonitorCallbackRequest* request, ::message::FaceMonitorCallbackResponse* response);
    virtual ::grpc::Status JoinFaceMonitor(::grpc::ServerContext* context, const ::message::JoinFaceMonitorRequest* request, ::message::JoinFaceMonitorResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTokenAuthInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTokenAuthInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetTokenAuthInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokenAuthInfo(::grpc::ServerContext* /*context*/, const ::message::TokenRequest* /*request*/, ::message::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTokenAuthInfo(::grpc::ServerContext* context, ::message::TokenRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::TokenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RenewToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RenewToken() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RenewToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewToken(::grpc::ServerContext* /*context*/, const ::message::TokenRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenewToken(::grpc::ServerContext* context, ::message::TokenRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSession() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::message::SessionCreateRequest* /*request*/, ::message::SessionCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSession(::grpc::ServerContext* context, ::message::SessionCreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::SessionCreateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FinishSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FinishSession() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FinishSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishSession(::grpc::ServerContext* /*context*/, const ::message::SessionFinishRequest* /*request*/, ::message::SessionFinishResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinishSession(::grpc::ServerContext* context, ::message::SessionFinishRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::SessionFinishResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadReplayFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadReplayFile() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UploadReplayFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadReplayFile(::grpc::ServerContext* /*context*/, const ::message::ReplayRequest* /*request*/, ::message::ReplayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadReplayFile(::grpc::ServerContext* context, ::message::ReplayRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::ReplayResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadCommand() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UploadCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadCommand(::grpc::ServerContext* /*context*/, const ::message::CommandRequest* /*request*/, ::message::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadCommand(::grpc::ServerContext* context, ::message::CommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DispatchTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DispatchTask() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DispatchTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DispatchTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::message::TaskResponse, ::message::FinishedTaskRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDispatchTask(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::message::TaskResponse, ::message::FinishedTaskRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(6, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScanRemainReplays : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScanRemainReplays() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ScanRemainReplays() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanRemainReplays(::grpc::ServerContext* /*context*/, const ::message::RemainReplayRequest* /*request*/, ::message::RemainReplayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanRemainReplays(::grpc::ServerContext* context, ::message::RemainReplayRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::RemainReplayResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCommandTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCommandTicket() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CreateCommandTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommandTicket(::grpc::ServerContext* /*context*/, const ::message::CommandConfirmRequest* /*request*/, ::message::CommandConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCommandTicket(::grpc::ServerContext* context, ::message::CommandConfirmRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::CommandConfirmResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckOrCreateAssetLoginTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckOrCreateAssetLoginTicket() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_CheckOrCreateAssetLoginTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckOrCreateAssetLoginTicket(::grpc::ServerContext* /*context*/, const ::message::AssetLoginTicketRequest* /*request*/, ::message::AssetLoginTicketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckOrCreateAssetLoginTicket(::grpc::ServerContext* context, ::message::AssetLoginTicketRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::AssetLoginTicketResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckTicketState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckTicketState() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_CheckTicketState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckTicketState(::grpc::ServerContext* /*context*/, const ::message::TicketRequest* /*request*/, ::message::TicketStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckTicketState(::grpc::ServerContext* context, ::message::TicketRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::TicketStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelTicket() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_CancelTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelTicket(::grpc::ServerContext* /*context*/, const ::message::TicketRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelTicket(::grpc::ServerContext* context, ::message::TicketRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateForward() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_CreateForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateForward(::grpc::ServerContext* /*context*/, const ::message::ForwardRequest* /*request*/, ::message::ForwardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateForward(::grpc::ServerContext* context, ::message::ForwardRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::ForwardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteForward() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_DeleteForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteForward(::grpc::ServerContext* /*context*/, const ::message::ForwardDeleteRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteForward(::grpc::ServerContext* context, ::message::ForwardDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPublicSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPublicSetting() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetPublicSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicSetting(::grpc::ServerContext* /*context*/, const ::message::Empty* /*request*/, ::message::PublicSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPublicSetting(::grpc::ServerContext* context, ::message::Empty* request, ::grpc::ServerAsyncResponseWriter< ::message::PublicSettingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetListenPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetListenPorts() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetListenPorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListenPorts(::grpc::ServerContext* /*context*/, const ::message::Empty* /*request*/, ::message::ListenPortResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetListenPorts(::grpc::ServerContext* context, ::message::Empty* request, ::grpc::ServerAsyncResponseWriter< ::message::ListenPortResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPortInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPortInfo() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetPortInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPortInfo(::grpc::ServerContext* /*context*/, const ::message::PortInfoRequest* /*request*/, ::message::PortInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPortInfo(::grpc::ServerContext* context, ::message::PortInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::PortInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HandlePortFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HandlePortFailure() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_HandlePortFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandlePortFailure(::grpc::ServerContext* /*context*/, const ::message::PortFailureRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandlePortFailure(::grpc::ServerContext* context, ::message::PortFailureRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckUserByCookies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckUserByCookies() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_CheckUserByCookies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckUserByCookies(::grpc::ServerContext* /*context*/, const ::message::CookiesRequest* /*request*/, ::message::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckUserByCookies(::grpc::ServerContext* context, ::message::CookiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::UserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordSessionLifecycleLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RecordSessionLifecycleLog() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_RecordSessionLifecycleLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordSessionLifecycleLog(::grpc::ServerContext* /*context*/, const ::message::SessionLifecycleLogRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordSessionLifecycleLog(::grpc::ServerContext* context, ::message::SessionLifecycleLogRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FaceRecognitionCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FaceRecognitionCallback() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_FaceRecognitionCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceRecognitionCallback(::grpc::ServerContext* /*context*/, const ::message::FaceRecognitionCallbackRequest* /*request*/, ::message::FaceRecognitionCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFaceRecognitionCallback(::grpc::ServerContext* context, ::message::FaceRecognitionCallbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::FaceRecognitionCallbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FaceMonitorCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FaceMonitorCallback() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_FaceMonitorCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceMonitorCallback(::grpc::ServerContext* /*context*/, const ::message::FaceMonitorCallbackRequest* /*request*/, ::message::FaceMonitorCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFaceMonitorCallback(::grpc::ServerContext* context, ::message::FaceMonitorCallbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::FaceMonitorCallbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_JoinFaceMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_JoinFaceMonitor() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_JoinFaceMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinFaceMonitor(::grpc::ServerContext* /*context*/, const ::message::JoinFaceMonitorRequest* /*request*/, ::message::JoinFaceMonitorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinFaceMonitor(::grpc::ServerContext* context, ::message::JoinFaceMonitorRequest* request, ::grpc::ServerAsyncResponseWriter< ::message::JoinFaceMonitorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetTokenAuthInfo<WithAsyncMethod_RenewToken<WithAsyncMethod_CreateSession<WithAsyncMethod_FinishSession<WithAsyncMethod_UploadReplayFile<WithAsyncMethod_UploadCommand<WithAsyncMethod_DispatchTask<WithAsyncMethod_ScanRemainReplays<WithAsyncMethod_CreateCommandTicket<WithAsyncMethod_CheckOrCreateAssetLoginTicket<WithAsyncMethod_CheckTicketState<WithAsyncMethod_CancelTicket<WithAsyncMethod_CreateForward<WithAsyncMethod_DeleteForward<WithAsyncMethod_GetPublicSetting<WithAsyncMethod_GetListenPorts<WithAsyncMethod_GetPortInfo<WithAsyncMethod_HandlePortFailure<WithAsyncMethod_CheckUserByCookies<WithAsyncMethod_RecordSessionLifecycleLog<WithAsyncMethod_FaceRecognitionCallback<WithAsyncMethod_FaceMonitorCallback<WithAsyncMethod_JoinFaceMonitor<Service > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetTokenAuthInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTokenAuthInfo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::message::TokenRequest, ::message::TokenResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::TokenRequest* request, ::message::TokenResponse* response) { return this->GetTokenAuthInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetTokenAuthInfo(
        ::grpc::MessageAllocator< ::message::TokenRequest, ::message::TokenResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::TokenRequest, ::message::TokenResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTokenAuthInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokenAuthInfo(::grpc::ServerContext* /*context*/, const ::message::TokenRequest* /*request*/, ::message::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTokenAuthInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::message::TokenRequest* /*request*/, ::message::TokenResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RenewToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RenewToken() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::message::TokenRequest, ::message::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::TokenRequest* request, ::message::StatusResponse* response) { return this->RenewToken(context, request, response); }));}
    void SetMessageAllocatorFor_RenewToken(
        ::grpc::MessageAllocator< ::message::TokenRequest, ::message::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::TokenRequest, ::message::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RenewToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewToken(::grpc::ServerContext* /*context*/, const ::message::TokenRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RenewToken(
      ::grpc::CallbackServerContext* /*context*/, const ::message::TokenRequest* /*request*/, ::message::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateSession() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::message::SessionCreateRequest, ::message::SessionCreateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::SessionCreateRequest* request, ::message::SessionCreateResponse* response) { return this->CreateSession(context, request, response); }));}
    void SetMessageAllocatorFor_CreateSession(
        ::grpc::MessageAllocator< ::message::SessionCreateRequest, ::message::SessionCreateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::SessionCreateRequest, ::message::SessionCreateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::message::SessionCreateRequest* /*request*/, ::message::SessionCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSession(
      ::grpc::CallbackServerContext* /*context*/, const ::message::SessionCreateRequest* /*request*/, ::message::SessionCreateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FinishSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FinishSession() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::message::SessionFinishRequest, ::message::SessionFinishResp>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::SessionFinishRequest* request, ::message::SessionFinishResp* response) { return this->FinishSession(context, request, response); }));}
    void SetMessageAllocatorFor_FinishSession(
        ::grpc::MessageAllocator< ::message::SessionFinishRequest, ::message::SessionFinishResp>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::SessionFinishRequest, ::message::SessionFinishResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FinishSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishSession(::grpc::ServerContext* /*context*/, const ::message::SessionFinishRequest* /*request*/, ::message::SessionFinishResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FinishSession(
      ::grpc::CallbackServerContext* /*context*/, const ::message::SessionFinishRequest* /*request*/, ::message::SessionFinishResp* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UploadReplayFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UploadReplayFile() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::message::ReplayRequest, ::message::ReplayResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::ReplayRequest* request, ::message::ReplayResponse* response) { return this->UploadReplayFile(context, request, response); }));}
    void SetMessageAllocatorFor_UploadReplayFile(
        ::grpc::MessageAllocator< ::message::ReplayRequest, ::message::ReplayResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::ReplayRequest, ::message::ReplayResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UploadReplayFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadReplayFile(::grpc::ServerContext* /*context*/, const ::message::ReplayRequest* /*request*/, ::message::ReplayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadReplayFile(
      ::grpc::CallbackServerContext* /*context*/, const ::message::ReplayRequest* /*request*/, ::message::ReplayResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UploadCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UploadCommand() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::message::CommandRequest, ::message::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::CommandRequest* request, ::message::CommandResponse* response) { return this->UploadCommand(context, request, response); }));}
    void SetMessageAllocatorFor_UploadCommand(
        ::grpc::MessageAllocator< ::message::CommandRequest, ::message::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::CommandRequest, ::message::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UploadCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadCommand(::grpc::ServerContext* /*context*/, const ::message::CommandRequest* /*request*/, ::message::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::message::CommandRequest* /*request*/, ::message::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DispatchTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DispatchTask() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackBidiHandler< ::message::FinishedTaskRequest, ::message::TaskResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->DispatchTask(context); }));
    }
    ~WithCallbackMethod_DispatchTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DispatchTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::message::TaskResponse, ::message::FinishedTaskRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::message::FinishedTaskRequest, ::message::TaskResponse>* DispatchTask(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScanRemainReplays : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScanRemainReplays() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::message::RemainReplayRequest, ::message::RemainReplayResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::RemainReplayRequest* request, ::message::RemainReplayResponse* response) { return this->ScanRemainReplays(context, request, response); }));}
    void SetMessageAllocatorFor_ScanRemainReplays(
        ::grpc::MessageAllocator< ::message::RemainReplayRequest, ::message::RemainReplayResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::RemainReplayRequest, ::message::RemainReplayResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScanRemainReplays() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanRemainReplays(::grpc::ServerContext* /*context*/, const ::message::RemainReplayRequest* /*request*/, ::message::RemainReplayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanRemainReplays(
      ::grpc::CallbackServerContext* /*context*/, const ::message::RemainReplayRequest* /*request*/, ::message::RemainReplayResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateCommandTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCommandTicket() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::message::CommandConfirmRequest, ::message::CommandConfirmResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::CommandConfirmRequest* request, ::message::CommandConfirmResponse* response) { return this->CreateCommandTicket(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCommandTicket(
        ::grpc::MessageAllocator< ::message::CommandConfirmRequest, ::message::CommandConfirmResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::CommandConfirmRequest, ::message::CommandConfirmResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCommandTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommandTicket(::grpc::ServerContext* /*context*/, const ::message::CommandConfirmRequest* /*request*/, ::message::CommandConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCommandTicket(
      ::grpc::CallbackServerContext* /*context*/, const ::message::CommandConfirmRequest* /*request*/, ::message::CommandConfirmResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckOrCreateAssetLoginTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckOrCreateAssetLoginTicket() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::message::AssetLoginTicketRequest, ::message::AssetLoginTicketResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::AssetLoginTicketRequest* request, ::message::AssetLoginTicketResponse* response) { return this->CheckOrCreateAssetLoginTicket(context, request, response); }));}
    void SetMessageAllocatorFor_CheckOrCreateAssetLoginTicket(
        ::grpc::MessageAllocator< ::message::AssetLoginTicketRequest, ::message::AssetLoginTicketResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::AssetLoginTicketRequest, ::message::AssetLoginTicketResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckOrCreateAssetLoginTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckOrCreateAssetLoginTicket(::grpc::ServerContext* /*context*/, const ::message::AssetLoginTicketRequest* /*request*/, ::message::AssetLoginTicketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckOrCreateAssetLoginTicket(
      ::grpc::CallbackServerContext* /*context*/, const ::message::AssetLoginTicketRequest* /*request*/, ::message::AssetLoginTicketResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckTicketState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckTicketState() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::message::TicketRequest, ::message::TicketStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::TicketRequest* request, ::message::TicketStateResponse* response) { return this->CheckTicketState(context, request, response); }));}
    void SetMessageAllocatorFor_CheckTicketState(
        ::grpc::MessageAllocator< ::message::TicketRequest, ::message::TicketStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::TicketRequest, ::message::TicketStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckTicketState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckTicketState(::grpc::ServerContext* /*context*/, const ::message::TicketRequest* /*request*/, ::message::TicketStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckTicketState(
      ::grpc::CallbackServerContext* /*context*/, const ::message::TicketRequest* /*request*/, ::message::TicketStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelTicket() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::message::TicketRequest, ::message::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::TicketRequest* request, ::message::StatusResponse* response) { return this->CancelTicket(context, request, response); }));}
    void SetMessageAllocatorFor_CancelTicket(
        ::grpc::MessageAllocator< ::message::TicketRequest, ::message::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::TicketRequest, ::message::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelTicket(::grpc::ServerContext* /*context*/, const ::message::TicketRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelTicket(
      ::grpc::CallbackServerContext* /*context*/, const ::message::TicketRequest* /*request*/, ::message::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateForward() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::message::ForwardRequest, ::message::ForwardResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::ForwardRequest* request, ::message::ForwardResponse* response) { return this->CreateForward(context, request, response); }));}
    void SetMessageAllocatorFor_CreateForward(
        ::grpc::MessageAllocator< ::message::ForwardRequest, ::message::ForwardResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::ForwardRequest, ::message::ForwardResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateForward(::grpc::ServerContext* /*context*/, const ::message::ForwardRequest* /*request*/, ::message::ForwardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateForward(
      ::grpc::CallbackServerContext* /*context*/, const ::message::ForwardRequest* /*request*/, ::message::ForwardResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteForward() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::message::ForwardDeleteRequest, ::message::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::ForwardDeleteRequest* request, ::message::StatusResponse* response) { return this->DeleteForward(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteForward(
        ::grpc::MessageAllocator< ::message::ForwardDeleteRequest, ::message::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::ForwardDeleteRequest, ::message::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteForward(::grpc::ServerContext* /*context*/, const ::message::ForwardDeleteRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteForward(
      ::grpc::CallbackServerContext* /*context*/, const ::message::ForwardDeleteRequest* /*request*/, ::message::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPublicSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPublicSetting() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::message::Empty, ::message::PublicSettingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::Empty* request, ::message::PublicSettingResponse* response) { return this->GetPublicSetting(context, request, response); }));}
    void SetMessageAllocatorFor_GetPublicSetting(
        ::grpc::MessageAllocator< ::message::Empty, ::message::PublicSettingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::Empty, ::message::PublicSettingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPublicSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicSetting(::grpc::ServerContext* /*context*/, const ::message::Empty* /*request*/, ::message::PublicSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPublicSetting(
      ::grpc::CallbackServerContext* /*context*/, const ::message::Empty* /*request*/, ::message::PublicSettingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetListenPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetListenPorts() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::message::Empty, ::message::ListenPortResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::Empty* request, ::message::ListenPortResponse* response) { return this->GetListenPorts(context, request, response); }));}
    void SetMessageAllocatorFor_GetListenPorts(
        ::grpc::MessageAllocator< ::message::Empty, ::message::ListenPortResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::Empty, ::message::ListenPortResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetListenPorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListenPorts(::grpc::ServerContext* /*context*/, const ::message::Empty* /*request*/, ::message::ListenPortResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetListenPorts(
      ::grpc::CallbackServerContext* /*context*/, const ::message::Empty* /*request*/, ::message::ListenPortResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPortInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPortInfo() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::message::PortInfoRequest, ::message::PortInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::PortInfoRequest* request, ::message::PortInfoResponse* response) { return this->GetPortInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetPortInfo(
        ::grpc::MessageAllocator< ::message::PortInfoRequest, ::message::PortInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::PortInfoRequest, ::message::PortInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPortInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPortInfo(::grpc::ServerContext* /*context*/, const ::message::PortInfoRequest* /*request*/, ::message::PortInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPortInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::message::PortInfoRequest* /*request*/, ::message::PortInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HandlePortFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HandlePortFailure() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::message::PortFailureRequest, ::message::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::PortFailureRequest* request, ::message::StatusResponse* response) { return this->HandlePortFailure(context, request, response); }));}
    void SetMessageAllocatorFor_HandlePortFailure(
        ::grpc::MessageAllocator< ::message::PortFailureRequest, ::message::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::PortFailureRequest, ::message::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HandlePortFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandlePortFailure(::grpc::ServerContext* /*context*/, const ::message::PortFailureRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandlePortFailure(
      ::grpc::CallbackServerContext* /*context*/, const ::message::PortFailureRequest* /*request*/, ::message::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckUserByCookies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckUserByCookies() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::message::CookiesRequest, ::message::UserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::CookiesRequest* request, ::message::UserResponse* response) { return this->CheckUserByCookies(context, request, response); }));}
    void SetMessageAllocatorFor_CheckUserByCookies(
        ::grpc::MessageAllocator< ::message::CookiesRequest, ::message::UserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::CookiesRequest, ::message::UserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckUserByCookies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckUserByCookies(::grpc::ServerContext* /*context*/, const ::message::CookiesRequest* /*request*/, ::message::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckUserByCookies(
      ::grpc::CallbackServerContext* /*context*/, const ::message::CookiesRequest* /*request*/, ::message::UserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RecordSessionLifecycleLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RecordSessionLifecycleLog() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::message::SessionLifecycleLogRequest, ::message::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::SessionLifecycleLogRequest* request, ::message::StatusResponse* response) { return this->RecordSessionLifecycleLog(context, request, response); }));}
    void SetMessageAllocatorFor_RecordSessionLifecycleLog(
        ::grpc::MessageAllocator< ::message::SessionLifecycleLogRequest, ::message::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::SessionLifecycleLogRequest, ::message::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RecordSessionLifecycleLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordSessionLifecycleLog(::grpc::ServerContext* /*context*/, const ::message::SessionLifecycleLogRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordSessionLifecycleLog(
      ::grpc::CallbackServerContext* /*context*/, const ::message::SessionLifecycleLogRequest* /*request*/, ::message::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FaceRecognitionCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FaceRecognitionCallback() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::message::FaceRecognitionCallbackRequest, ::message::FaceRecognitionCallbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::FaceRecognitionCallbackRequest* request, ::message::FaceRecognitionCallbackResponse* response) { return this->FaceRecognitionCallback(context, request, response); }));}
    void SetMessageAllocatorFor_FaceRecognitionCallback(
        ::grpc::MessageAllocator< ::message::FaceRecognitionCallbackRequest, ::message::FaceRecognitionCallbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::FaceRecognitionCallbackRequest, ::message::FaceRecognitionCallbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FaceRecognitionCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceRecognitionCallback(::grpc::ServerContext* /*context*/, const ::message::FaceRecognitionCallbackRequest* /*request*/, ::message::FaceRecognitionCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FaceRecognitionCallback(
      ::grpc::CallbackServerContext* /*context*/, const ::message::FaceRecognitionCallbackRequest* /*request*/, ::message::FaceRecognitionCallbackResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FaceMonitorCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FaceMonitorCallback() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::message::FaceMonitorCallbackRequest, ::message::FaceMonitorCallbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::FaceMonitorCallbackRequest* request, ::message::FaceMonitorCallbackResponse* response) { return this->FaceMonitorCallback(context, request, response); }));}
    void SetMessageAllocatorFor_FaceMonitorCallback(
        ::grpc::MessageAllocator< ::message::FaceMonitorCallbackRequest, ::message::FaceMonitorCallbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::FaceMonitorCallbackRequest, ::message::FaceMonitorCallbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FaceMonitorCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceMonitorCallback(::grpc::ServerContext* /*context*/, const ::message::FaceMonitorCallbackRequest* /*request*/, ::message::FaceMonitorCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FaceMonitorCallback(
      ::grpc::CallbackServerContext* /*context*/, const ::message::FaceMonitorCallbackRequest* /*request*/, ::message::FaceMonitorCallbackResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_JoinFaceMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_JoinFaceMonitor() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::message::JoinFaceMonitorRequest, ::message::JoinFaceMonitorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::message::JoinFaceMonitorRequest* request, ::message::JoinFaceMonitorResponse* response) { return this->JoinFaceMonitor(context, request, response); }));}
    void SetMessageAllocatorFor_JoinFaceMonitor(
        ::grpc::MessageAllocator< ::message::JoinFaceMonitorRequest, ::message::JoinFaceMonitorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::message::JoinFaceMonitorRequest, ::message::JoinFaceMonitorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_JoinFaceMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinFaceMonitor(::grpc::ServerContext* /*context*/, const ::message::JoinFaceMonitorRequest* /*request*/, ::message::JoinFaceMonitorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* JoinFaceMonitor(
      ::grpc::CallbackServerContext* /*context*/, const ::message::JoinFaceMonitorRequest* /*request*/, ::message::JoinFaceMonitorResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetTokenAuthInfo<WithCallbackMethod_RenewToken<WithCallbackMethod_CreateSession<WithCallbackMethod_FinishSession<WithCallbackMethod_UploadReplayFile<WithCallbackMethod_UploadCommand<WithCallbackMethod_DispatchTask<WithCallbackMethod_ScanRemainReplays<WithCallbackMethod_CreateCommandTicket<WithCallbackMethod_CheckOrCreateAssetLoginTicket<WithCallbackMethod_CheckTicketState<WithCallbackMethod_CancelTicket<WithCallbackMethod_CreateForward<WithCallbackMethod_DeleteForward<WithCallbackMethod_GetPublicSetting<WithCallbackMethod_GetListenPorts<WithCallbackMethod_GetPortInfo<WithCallbackMethod_HandlePortFailure<WithCallbackMethod_CheckUserByCookies<WithCallbackMethod_RecordSessionLifecycleLog<WithCallbackMethod_FaceRecognitionCallback<WithCallbackMethod_FaceMonitorCallback<WithCallbackMethod_JoinFaceMonitor<Service > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetTokenAuthInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTokenAuthInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetTokenAuthInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokenAuthInfo(::grpc::ServerContext* /*context*/, const ::message::TokenRequest* /*request*/, ::message::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RenewToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RenewToken() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RenewToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewToken(::grpc::ServerContext* /*context*/, const ::message::TokenRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSession() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::message::SessionCreateRequest* /*request*/, ::message::SessionCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FinishSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FinishSession() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FinishSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishSession(::grpc::ServerContext* /*context*/, const ::message::SessionFinishRequest* /*request*/, ::message::SessionFinishResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadReplayFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadReplayFile() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UploadReplayFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadReplayFile(::grpc::ServerContext* /*context*/, const ::message::ReplayRequest* /*request*/, ::message::ReplayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadCommand() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UploadCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadCommand(::grpc::ServerContext* /*context*/, const ::message::CommandRequest* /*request*/, ::message::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DispatchTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DispatchTask() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DispatchTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DispatchTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::message::TaskResponse, ::message::FinishedTaskRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScanRemainReplays : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScanRemainReplays() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ScanRemainReplays() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanRemainReplays(::grpc::ServerContext* /*context*/, const ::message::RemainReplayRequest* /*request*/, ::message::RemainReplayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCommandTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCommandTicket() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CreateCommandTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommandTicket(::grpc::ServerContext* /*context*/, const ::message::CommandConfirmRequest* /*request*/, ::message::CommandConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckOrCreateAssetLoginTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckOrCreateAssetLoginTicket() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_CheckOrCreateAssetLoginTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckOrCreateAssetLoginTicket(::grpc::ServerContext* /*context*/, const ::message::AssetLoginTicketRequest* /*request*/, ::message::AssetLoginTicketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckTicketState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckTicketState() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_CheckTicketState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckTicketState(::grpc::ServerContext* /*context*/, const ::message::TicketRequest* /*request*/, ::message::TicketStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelTicket() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_CancelTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelTicket(::grpc::ServerContext* /*context*/, const ::message::TicketRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateForward() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_CreateForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateForward(::grpc::ServerContext* /*context*/, const ::message::ForwardRequest* /*request*/, ::message::ForwardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteForward() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_DeleteForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteForward(::grpc::ServerContext* /*context*/, const ::message::ForwardDeleteRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPublicSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPublicSetting() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetPublicSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicSetting(::grpc::ServerContext* /*context*/, const ::message::Empty* /*request*/, ::message::PublicSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetListenPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetListenPorts() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetListenPorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListenPorts(::grpc::ServerContext* /*context*/, const ::message::Empty* /*request*/, ::message::ListenPortResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPortInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPortInfo() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetPortInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPortInfo(::grpc::ServerContext* /*context*/, const ::message::PortInfoRequest* /*request*/, ::message::PortInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HandlePortFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HandlePortFailure() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_HandlePortFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandlePortFailure(::grpc::ServerContext* /*context*/, const ::message::PortFailureRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckUserByCookies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckUserByCookies() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_CheckUserByCookies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckUserByCookies(::grpc::ServerContext* /*context*/, const ::message::CookiesRequest* /*request*/, ::message::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordSessionLifecycleLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RecordSessionLifecycleLog() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_RecordSessionLifecycleLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordSessionLifecycleLog(::grpc::ServerContext* /*context*/, const ::message::SessionLifecycleLogRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FaceRecognitionCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FaceRecognitionCallback() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_FaceRecognitionCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceRecognitionCallback(::grpc::ServerContext* /*context*/, const ::message::FaceRecognitionCallbackRequest* /*request*/, ::message::FaceRecognitionCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FaceMonitorCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FaceMonitorCallback() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_FaceMonitorCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceMonitorCallback(::grpc::ServerContext* /*context*/, const ::message::FaceMonitorCallbackRequest* /*request*/, ::message::FaceMonitorCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_JoinFaceMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_JoinFaceMonitor() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_JoinFaceMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinFaceMonitor(::grpc::ServerContext* /*context*/, const ::message::JoinFaceMonitorRequest* /*request*/, ::message::JoinFaceMonitorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTokenAuthInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTokenAuthInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetTokenAuthInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokenAuthInfo(::grpc::ServerContext* /*context*/, const ::message::TokenRequest* /*request*/, ::message::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTokenAuthInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RenewToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RenewToken() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RenewToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewToken(::grpc::ServerContext* /*context*/, const ::message::TokenRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenewToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSession() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::message::SessionCreateRequest* /*request*/, ::message::SessionCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FinishSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FinishSession() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FinishSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishSession(::grpc::ServerContext* /*context*/, const ::message::SessionFinishRequest* /*request*/, ::message::SessionFinishResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinishSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadReplayFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadReplayFile() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UploadReplayFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadReplayFile(::grpc::ServerContext* /*context*/, const ::message::ReplayRequest* /*request*/, ::message::ReplayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadReplayFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadCommand() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UploadCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadCommand(::grpc::ServerContext* /*context*/, const ::message::CommandRequest* /*request*/, ::message::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DispatchTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DispatchTask() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DispatchTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DispatchTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::message::TaskResponse, ::message::FinishedTaskRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDispatchTask(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(6, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScanRemainReplays : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScanRemainReplays() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ScanRemainReplays() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanRemainReplays(::grpc::ServerContext* /*context*/, const ::message::RemainReplayRequest* /*request*/, ::message::RemainReplayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanRemainReplays(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCommandTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCommandTicket() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CreateCommandTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommandTicket(::grpc::ServerContext* /*context*/, const ::message::CommandConfirmRequest* /*request*/, ::message::CommandConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCommandTicket(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckOrCreateAssetLoginTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckOrCreateAssetLoginTicket() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_CheckOrCreateAssetLoginTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckOrCreateAssetLoginTicket(::grpc::ServerContext* /*context*/, const ::message::AssetLoginTicketRequest* /*request*/, ::message::AssetLoginTicketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckOrCreateAssetLoginTicket(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckTicketState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckTicketState() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_CheckTicketState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckTicketState(::grpc::ServerContext* /*context*/, const ::message::TicketRequest* /*request*/, ::message::TicketStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckTicketState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelTicket() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_CancelTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelTicket(::grpc::ServerContext* /*context*/, const ::message::TicketRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelTicket(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateForward() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_CreateForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateForward(::grpc::ServerContext* /*context*/, const ::message::ForwardRequest* /*request*/, ::message::ForwardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateForward(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteForward() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_DeleteForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteForward(::grpc::ServerContext* /*context*/, const ::message::ForwardDeleteRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteForward(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPublicSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPublicSetting() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetPublicSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicSetting(::grpc::ServerContext* /*context*/, const ::message::Empty* /*request*/, ::message::PublicSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPublicSetting(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetListenPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetListenPorts() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetListenPorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListenPorts(::grpc::ServerContext* /*context*/, const ::message::Empty* /*request*/, ::message::ListenPortResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetListenPorts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPortInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPortInfo() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetPortInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPortInfo(::grpc::ServerContext* /*context*/, const ::message::PortInfoRequest* /*request*/, ::message::PortInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPortInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HandlePortFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HandlePortFailure() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_HandlePortFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandlePortFailure(::grpc::ServerContext* /*context*/, const ::message::PortFailureRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHandlePortFailure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckUserByCookies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckUserByCookies() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_CheckUserByCookies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckUserByCookies(::grpc::ServerContext* /*context*/, const ::message::CookiesRequest* /*request*/, ::message::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckUserByCookies(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecordSessionLifecycleLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RecordSessionLifecycleLog() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_RecordSessionLifecycleLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordSessionLifecycleLog(::grpc::ServerContext* /*context*/, const ::message::SessionLifecycleLogRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordSessionLifecycleLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FaceRecognitionCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FaceRecognitionCallback() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_FaceRecognitionCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceRecognitionCallback(::grpc::ServerContext* /*context*/, const ::message::FaceRecognitionCallbackRequest* /*request*/, ::message::FaceRecognitionCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFaceRecognitionCallback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FaceMonitorCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FaceMonitorCallback() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_FaceMonitorCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceMonitorCallback(::grpc::ServerContext* /*context*/, const ::message::FaceMonitorCallbackRequest* /*request*/, ::message::FaceMonitorCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFaceMonitorCallback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_JoinFaceMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_JoinFaceMonitor() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_JoinFaceMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinFaceMonitor(::grpc::ServerContext* /*context*/, const ::message::JoinFaceMonitorRequest* /*request*/, ::message::JoinFaceMonitorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoinFaceMonitor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTokenAuthInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTokenAuthInfo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTokenAuthInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTokenAuthInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokenAuthInfo(::grpc::ServerContext* /*context*/, const ::message::TokenRequest* /*request*/, ::message::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTokenAuthInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RenewToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RenewToken() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RenewToken(context, request, response); }));
    }
    ~WithRawCallbackMethod_RenewToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenewToken(::grpc::ServerContext* /*context*/, const ::message::TokenRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RenewToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateSession() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::message::SessionCreateRequest* /*request*/, ::message::SessionCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FinishSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FinishSession() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FinishSession(context, request, response); }));
    }
    ~WithRawCallbackMethod_FinishSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishSession(::grpc::ServerContext* /*context*/, const ::message::SessionFinishRequest* /*request*/, ::message::SessionFinishResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FinishSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UploadReplayFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UploadReplayFile() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UploadReplayFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_UploadReplayFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadReplayFile(::grpc::ServerContext* /*context*/, const ::message::ReplayRequest* /*request*/, ::message::ReplayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadReplayFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UploadCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UploadCommand() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UploadCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_UploadCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadCommand(::grpc::ServerContext* /*context*/, const ::message::CommandRequest* /*request*/, ::message::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DispatchTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DispatchTask() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->DispatchTask(context); }));
    }
    ~WithRawCallbackMethod_DispatchTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DispatchTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::message::TaskResponse, ::message::FinishedTaskRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DispatchTask(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScanRemainReplays : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScanRemainReplays() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScanRemainReplays(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScanRemainReplays() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanRemainReplays(::grpc::ServerContext* /*context*/, const ::message::RemainReplayRequest* /*request*/, ::message::RemainReplayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScanRemainReplays(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCommandTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCommandTicket() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCommandTicket(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCommandTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCommandTicket(::grpc::ServerContext* /*context*/, const ::message::CommandConfirmRequest* /*request*/, ::message::CommandConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCommandTicket(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckOrCreateAssetLoginTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckOrCreateAssetLoginTicket() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckOrCreateAssetLoginTicket(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckOrCreateAssetLoginTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckOrCreateAssetLoginTicket(::grpc::ServerContext* /*context*/, const ::message::AssetLoginTicketRequest* /*request*/, ::message::AssetLoginTicketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckOrCreateAssetLoginTicket(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckTicketState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckTicketState() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckTicketState(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckTicketState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckTicketState(::grpc::ServerContext* /*context*/, const ::message::TicketRequest* /*request*/, ::message::TicketStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckTicketState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelTicket() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelTicket(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelTicket(::grpc::ServerContext* /*context*/, const ::message::TicketRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelTicket(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateForward() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateForward(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateForward(::grpc::ServerContext* /*context*/, const ::message::ForwardRequest* /*request*/, ::message::ForwardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateForward(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteForward() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteForward(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteForward(::grpc::ServerContext* /*context*/, const ::message::ForwardDeleteRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteForward(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPublicSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPublicSetting() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPublicSetting(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPublicSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicSetting(::grpc::ServerContext* /*context*/, const ::message::Empty* /*request*/, ::message::PublicSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPublicSetting(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetListenPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetListenPorts() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetListenPorts(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetListenPorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetListenPorts(::grpc::ServerContext* /*context*/, const ::message::Empty* /*request*/, ::message::ListenPortResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetListenPorts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPortInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPortInfo() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPortInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPortInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPortInfo(::grpc::ServerContext* /*context*/, const ::message::PortInfoRequest* /*request*/, ::message::PortInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPortInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HandlePortFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HandlePortFailure() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HandlePortFailure(context, request, response); }));
    }
    ~WithRawCallbackMethod_HandlePortFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HandlePortFailure(::grpc::ServerContext* /*context*/, const ::message::PortFailureRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HandlePortFailure(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckUserByCookies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckUserByCookies() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckUserByCookies(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckUserByCookies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckUserByCookies(::grpc::ServerContext* /*context*/, const ::message::CookiesRequest* /*request*/, ::message::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckUserByCookies(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RecordSessionLifecycleLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RecordSessionLifecycleLog() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RecordSessionLifecycleLog(context, request, response); }));
    }
    ~WithRawCallbackMethod_RecordSessionLifecycleLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordSessionLifecycleLog(::grpc::ServerContext* /*context*/, const ::message::SessionLifecycleLogRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RecordSessionLifecycleLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FaceRecognitionCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FaceRecognitionCallback() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FaceRecognitionCallback(context, request, response); }));
    }
    ~WithRawCallbackMethod_FaceRecognitionCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceRecognitionCallback(::grpc::ServerContext* /*context*/, const ::message::FaceRecognitionCallbackRequest* /*request*/, ::message::FaceRecognitionCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FaceRecognitionCallback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FaceMonitorCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FaceMonitorCallback() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FaceMonitorCallback(context, request, response); }));
    }
    ~WithRawCallbackMethod_FaceMonitorCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FaceMonitorCallback(::grpc::ServerContext* /*context*/, const ::message::FaceMonitorCallbackRequest* /*request*/, ::message::FaceMonitorCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FaceMonitorCallback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_JoinFaceMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_JoinFaceMonitor() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->JoinFaceMonitor(context, request, response); }));
    }
    ~WithRawCallbackMethod_JoinFaceMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status JoinFaceMonitor(::grpc::ServerContext* /*context*/, const ::message::JoinFaceMonitorRequest* /*request*/, ::message::JoinFaceMonitorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* JoinFaceMonitor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTokenAuthInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTokenAuthInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::TokenRequest, ::message::TokenResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::TokenRequest, ::message::TokenResponse>* streamer) {
                       return this->StreamedGetTokenAuthInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTokenAuthInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTokenAuthInfo(::grpc::ServerContext* /*context*/, const ::message::TokenRequest* /*request*/, ::message::TokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTokenAuthInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::TokenRequest,::message::TokenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RenewToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RenewToken() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::TokenRequest, ::message::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::TokenRequest, ::message::StatusResponse>* streamer) {
                       return this->StreamedRenewToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RenewToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RenewToken(::grpc::ServerContext* /*context*/, const ::message::TokenRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRenewToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::TokenRequest,::message::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSession() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::SessionCreateRequest, ::message::SessionCreateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::SessionCreateRequest, ::message::SessionCreateResponse>* streamer) {
                       return this->StreamedCreateSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::message::SessionCreateRequest* /*request*/, ::message::SessionCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::SessionCreateRequest,::message::SessionCreateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FinishSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FinishSession() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::SessionFinishRequest, ::message::SessionFinishResp>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::SessionFinishRequest, ::message::SessionFinishResp>* streamer) {
                       return this->StreamedFinishSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FinishSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FinishSession(::grpc::ServerContext* /*context*/, const ::message::SessionFinishRequest* /*request*/, ::message::SessionFinishResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFinishSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::SessionFinishRequest,::message::SessionFinishResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadReplayFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UploadReplayFile() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::ReplayRequest, ::message::ReplayResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::ReplayRequest, ::message::ReplayResponse>* streamer) {
                       return this->StreamedUploadReplayFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UploadReplayFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadReplayFile(::grpc::ServerContext* /*context*/, const ::message::ReplayRequest* /*request*/, ::message::ReplayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadReplayFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::ReplayRequest,::message::ReplayResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UploadCommand() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::CommandRequest, ::message::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::CommandRequest, ::message::CommandResponse>* streamer) {
                       return this->StreamedUploadCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UploadCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadCommand(::grpc::ServerContext* /*context*/, const ::message::CommandRequest* /*request*/, ::message::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::CommandRequest,::message::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScanRemainReplays : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScanRemainReplays() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::RemainReplayRequest, ::message::RemainReplayResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::RemainReplayRequest, ::message::RemainReplayResponse>* streamer) {
                       return this->StreamedScanRemainReplays(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScanRemainReplays() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScanRemainReplays(::grpc::ServerContext* /*context*/, const ::message::RemainReplayRequest* /*request*/, ::message::RemainReplayResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScanRemainReplays(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::RemainReplayRequest,::message::RemainReplayResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCommandTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCommandTicket() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::CommandConfirmRequest, ::message::CommandConfirmResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::CommandConfirmRequest, ::message::CommandConfirmResponse>* streamer) {
                       return this->StreamedCreateCommandTicket(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCommandTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCommandTicket(::grpc::ServerContext* /*context*/, const ::message::CommandConfirmRequest* /*request*/, ::message::CommandConfirmResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCommandTicket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::CommandConfirmRequest,::message::CommandConfirmResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckOrCreateAssetLoginTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckOrCreateAssetLoginTicket() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::AssetLoginTicketRequest, ::message::AssetLoginTicketResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::AssetLoginTicketRequest, ::message::AssetLoginTicketResponse>* streamer) {
                       return this->StreamedCheckOrCreateAssetLoginTicket(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckOrCreateAssetLoginTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckOrCreateAssetLoginTicket(::grpc::ServerContext* /*context*/, const ::message::AssetLoginTicketRequest* /*request*/, ::message::AssetLoginTicketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckOrCreateAssetLoginTicket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::AssetLoginTicketRequest,::message::AssetLoginTicketResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckTicketState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckTicketState() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::TicketRequest, ::message::TicketStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::TicketRequest, ::message::TicketStateResponse>* streamer) {
                       return this->StreamedCheckTicketState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckTicketState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckTicketState(::grpc::ServerContext* /*context*/, const ::message::TicketRequest* /*request*/, ::message::TicketStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckTicketState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::TicketRequest,::message::TicketStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelTicket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelTicket() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::TicketRequest, ::message::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::TicketRequest, ::message::StatusResponse>* streamer) {
                       return this->StreamedCancelTicket(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelTicket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelTicket(::grpc::ServerContext* /*context*/, const ::message::TicketRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelTicket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::TicketRequest,::message::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateForward() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::ForwardRequest, ::message::ForwardResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::ForwardRequest, ::message::ForwardResponse>* streamer) {
                       return this->StreamedCreateForward(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateForward(::grpc::ServerContext* /*context*/, const ::message::ForwardRequest* /*request*/, ::message::ForwardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateForward(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::ForwardRequest,::message::ForwardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteForward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteForward() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::ForwardDeleteRequest, ::message::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::ForwardDeleteRequest, ::message::StatusResponse>* streamer) {
                       return this->StreamedDeleteForward(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteForward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteForward(::grpc::ServerContext* /*context*/, const ::message::ForwardDeleteRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteForward(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::ForwardDeleteRequest,::message::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPublicSetting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPublicSetting() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::Empty, ::message::PublicSettingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::Empty, ::message::PublicSettingResponse>* streamer) {
                       return this->StreamedGetPublicSetting(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPublicSetting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPublicSetting(::grpc::ServerContext* /*context*/, const ::message::Empty* /*request*/, ::message::PublicSettingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPublicSetting(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::Empty,::message::PublicSettingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetListenPorts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetListenPorts() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::Empty, ::message::ListenPortResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::Empty, ::message::ListenPortResponse>* streamer) {
                       return this->StreamedGetListenPorts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetListenPorts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetListenPorts(::grpc::ServerContext* /*context*/, const ::message::Empty* /*request*/, ::message::ListenPortResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetListenPorts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::Empty,::message::ListenPortResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPortInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPortInfo() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::PortInfoRequest, ::message::PortInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::PortInfoRequest, ::message::PortInfoResponse>* streamer) {
                       return this->StreamedGetPortInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPortInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPortInfo(::grpc::ServerContext* /*context*/, const ::message::PortInfoRequest* /*request*/, ::message::PortInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPortInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::PortInfoRequest,::message::PortInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HandlePortFailure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HandlePortFailure() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::PortFailureRequest, ::message::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::PortFailureRequest, ::message::StatusResponse>* streamer) {
                       return this->StreamedHandlePortFailure(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HandlePortFailure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HandlePortFailure(::grpc::ServerContext* /*context*/, const ::message::PortFailureRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHandlePortFailure(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::PortFailureRequest,::message::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckUserByCookies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckUserByCookies() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::CookiesRequest, ::message::UserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::CookiesRequest, ::message::UserResponse>* streamer) {
                       return this->StreamedCheckUserByCookies(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckUserByCookies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckUserByCookies(::grpc::ServerContext* /*context*/, const ::message::CookiesRequest* /*request*/, ::message::UserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckUserByCookies(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::CookiesRequest,::message::UserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecordSessionLifecycleLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RecordSessionLifecycleLog() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::SessionLifecycleLogRequest, ::message::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::SessionLifecycleLogRequest, ::message::StatusResponse>* streamer) {
                       return this->StreamedRecordSessionLifecycleLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RecordSessionLifecycleLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecordSessionLifecycleLog(::grpc::ServerContext* /*context*/, const ::message::SessionLifecycleLogRequest* /*request*/, ::message::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecordSessionLifecycleLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::SessionLifecycleLogRequest,::message::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FaceRecognitionCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FaceRecognitionCallback() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::FaceRecognitionCallbackRequest, ::message::FaceRecognitionCallbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::FaceRecognitionCallbackRequest, ::message::FaceRecognitionCallbackResponse>* streamer) {
                       return this->StreamedFaceRecognitionCallback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FaceRecognitionCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FaceRecognitionCallback(::grpc::ServerContext* /*context*/, const ::message::FaceRecognitionCallbackRequest* /*request*/, ::message::FaceRecognitionCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFaceRecognitionCallback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::FaceRecognitionCallbackRequest,::message::FaceRecognitionCallbackResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FaceMonitorCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FaceMonitorCallback() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::FaceMonitorCallbackRequest, ::message::FaceMonitorCallbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::FaceMonitorCallbackRequest, ::message::FaceMonitorCallbackResponse>* streamer) {
                       return this->StreamedFaceMonitorCallback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FaceMonitorCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FaceMonitorCallback(::grpc::ServerContext* /*context*/, const ::message::FaceMonitorCallbackRequest* /*request*/, ::message::FaceMonitorCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFaceMonitorCallback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::FaceMonitorCallbackRequest,::message::FaceMonitorCallbackResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_JoinFaceMonitor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_JoinFaceMonitor() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::message::JoinFaceMonitorRequest, ::message::JoinFaceMonitorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::message::JoinFaceMonitorRequest, ::message::JoinFaceMonitorResponse>* streamer) {
                       return this->StreamedJoinFaceMonitor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_JoinFaceMonitor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status JoinFaceMonitor(::grpc::ServerContext* /*context*/, const ::message::JoinFaceMonitorRequest* /*request*/, ::message::JoinFaceMonitorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedJoinFaceMonitor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::message::JoinFaceMonitorRequest,::message::JoinFaceMonitorResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetTokenAuthInfo<WithStreamedUnaryMethod_RenewToken<WithStreamedUnaryMethod_CreateSession<WithStreamedUnaryMethod_FinishSession<WithStreamedUnaryMethod_UploadReplayFile<WithStreamedUnaryMethod_UploadCommand<WithStreamedUnaryMethod_ScanRemainReplays<WithStreamedUnaryMethod_CreateCommandTicket<WithStreamedUnaryMethod_CheckOrCreateAssetLoginTicket<WithStreamedUnaryMethod_CheckTicketState<WithStreamedUnaryMethod_CancelTicket<WithStreamedUnaryMethod_CreateForward<WithStreamedUnaryMethod_DeleteForward<WithStreamedUnaryMethod_GetPublicSetting<WithStreamedUnaryMethod_GetListenPorts<WithStreamedUnaryMethod_GetPortInfo<WithStreamedUnaryMethod_HandlePortFailure<WithStreamedUnaryMethod_CheckUserByCookies<WithStreamedUnaryMethod_RecordSessionLifecycleLog<WithStreamedUnaryMethod_FaceRecognitionCallback<WithStreamedUnaryMethod_FaceMonitorCallback<WithStreamedUnaryMethod_JoinFaceMonitor<Service > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetTokenAuthInfo<WithStreamedUnaryMethod_RenewToken<WithStreamedUnaryMethod_CreateSession<WithStreamedUnaryMethod_FinishSession<WithStreamedUnaryMethod_UploadReplayFile<WithStreamedUnaryMethod_UploadCommand<WithStreamedUnaryMethod_ScanRemainReplays<WithStreamedUnaryMethod_CreateCommandTicket<WithStreamedUnaryMethod_CheckOrCreateAssetLoginTicket<WithStreamedUnaryMethod_CheckTicketState<WithStreamedUnaryMethod_CancelTicket<WithStreamedUnaryMethod_CreateForward<WithStreamedUnaryMethod_DeleteForward<WithStreamedUnaryMethod_GetPublicSetting<WithStreamedUnaryMethod_GetListenPorts<WithStreamedUnaryMethod_GetPortInfo<WithStreamedUnaryMethod_HandlePortFailure<WithStreamedUnaryMethod_CheckUserByCookies<WithStreamedUnaryMethod_RecordSessionLifecycleLog<WithStreamedUnaryMethod_FaceRecognitionCallback<WithStreamedUnaryMethod_FaceMonitorCallback<WithStreamedUnaryMethod_JoinFaceMonitor<Service > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace message


#endif  // GRPC_service_2eproto__INCLUDED

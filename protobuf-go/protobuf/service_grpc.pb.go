// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	GetDBTokenAuthInfo(ctx context.Context, in *DBTokenRequest, opts ...grpc.CallOption) (*DBTokenResponse, error)
	CreateSession(ctx context.Context, in *SessionCreateRequest, opts ...grpc.CallOption) (*SessionCreateResponse, error)
	FinishSession(ctx context.Context, in *SessionFinishRequest, opts ...grpc.CallOption) (*SessionFinishResp, error)
	UploadReplayFile(ctx context.Context, in *ReplayRequest, opts ...grpc.CallOption) (*ReplayResponse, error)
	UploadCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	DispatchStreamingTask(ctx context.Context, opts ...grpc.CallOption) (Service_DispatchStreamingTaskClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetDBTokenAuthInfo(ctx context.Context, in *DBTokenRequest, opts ...grpc.CallOption) (*DBTokenResponse, error) {
	out := new(DBTokenResponse)
	err := c.cc.Invoke(ctx, "/message.Service/GetDBTokenAuthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateSession(ctx context.Context, in *SessionCreateRequest, opts ...grpc.CallOption) (*SessionCreateResponse, error) {
	out := new(SessionCreateResponse)
	err := c.cc.Invoke(ctx, "/message.Service/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) FinishSession(ctx context.Context, in *SessionFinishRequest, opts ...grpc.CallOption) (*SessionFinishResp, error) {
	out := new(SessionFinishResp)
	err := c.cc.Invoke(ctx, "/message.Service/FinishSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UploadReplayFile(ctx context.Context, in *ReplayRequest, opts ...grpc.CallOption) (*ReplayResponse, error) {
	out := new(ReplayResponse)
	err := c.cc.Invoke(ctx, "/message.Service/UploadReplayFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UploadCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/message.Service/UploadCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DispatchStreamingTask(ctx context.Context, opts ...grpc.CallOption) (Service_DispatchStreamingTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], "/message.Service/DispatchStreamingTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceDispatchStreamingTaskClient{stream}
	return x, nil
}

type Service_DispatchStreamingTaskClient interface {
	Send(*TaskRequest) error
	Recv() (*TaskResponse, error)
	grpc.ClientStream
}

type serviceDispatchStreamingTaskClient struct {
	grpc.ClientStream
}

func (x *serviceDispatchStreamingTaskClient) Send(m *TaskRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceDispatchStreamingTaskClient) Recv() (*TaskResponse, error) {
	m := new(TaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	GetDBTokenAuthInfo(context.Context, *DBTokenRequest) (*DBTokenResponse, error)
	CreateSession(context.Context, *SessionCreateRequest) (*SessionCreateResponse, error)
	FinishSession(context.Context, *SessionFinishRequest) (*SessionFinishResp, error)
	UploadReplayFile(context.Context, *ReplayRequest) (*ReplayResponse, error)
	UploadCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	DispatchStreamingTask(Service_DispatchStreamingTaskServer) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) GetDBTokenAuthInfo(context.Context, *DBTokenRequest) (*DBTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDBTokenAuthInfo not implemented")
}
func (UnimplementedServiceServer) CreateSession(context.Context, *SessionCreateRequest) (*SessionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedServiceServer) FinishSession(context.Context, *SessionFinishRequest) (*SessionFinishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishSession not implemented")
}
func (UnimplementedServiceServer) UploadReplayFile(context.Context, *ReplayRequest) (*ReplayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadReplayFile not implemented")
}
func (UnimplementedServiceServer) UploadCommand(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCommand not implemented")
}
func (UnimplementedServiceServer) DispatchStreamingTask(Service_DispatchStreamingTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method DispatchStreamingTask not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_GetDBTokenAuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetDBTokenAuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.Service/GetDBTokenAuthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetDBTokenAuthInfo(ctx, req.(*DBTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.Service/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateSession(ctx, req.(*SessionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_FinishSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).FinishSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.Service/FinishSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).FinishSession(ctx, req.(*SessionFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UploadReplayFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UploadReplayFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.Service/UploadReplayFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UploadReplayFile(ctx, req.(*ReplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UploadCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UploadCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.Service/UploadCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UploadCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DispatchStreamingTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).DispatchStreamingTask(&serviceDispatchStreamingTaskServer{stream})
}

type Service_DispatchStreamingTaskServer interface {
	Send(*TaskResponse) error
	Recv() (*TaskRequest, error)
	grpc.ServerStream
}

type serviceDispatchStreamingTaskServer struct {
	grpc.ServerStream
}

func (x *serviceDispatchStreamingTaskServer) Send(m *TaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceDispatchStreamingTaskServer) Recv() (*TaskRequest, error) {
	m := new(TaskRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDBTokenAuthInfo",
			Handler:    _Service_GetDBTokenAuthInfo_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _Service_CreateSession_Handler,
		},
		{
			MethodName: "FinishSession",
			Handler:    _Service_FinishSession_Handler,
		},
		{
			MethodName: "UploadReplayFile",
			Handler:    _Service_UploadReplayFile_Handler,
		},
		{
			MethodName: "UploadCommand",
			Handler:    _Service_UploadCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DispatchStreamingTask",
			Handler:       _Service_DispatchStreamingTask_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
